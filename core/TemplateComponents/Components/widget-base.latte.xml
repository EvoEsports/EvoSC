{contentType text}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink name="EvoSC:{include id}" id="{include id}" version="3">
    {include isManiaPlanet() ? 'Components.stylesheet' : 'Components.stylesheet_noblur'}
    <script><!--
#Include "MathLib" as ML
#Include "TextLib" as TL
#Include "TimeLib" as TimeLib
#Include "ColorLib" as CL

#Struct WidgetRow {
    Real height;
    Boolean visible;
    Real[Integer] widths;
    Integer slot;
}

#Struct WidgetGrid {
    WidgetRow[Integer] left;
    WidgetRow[Integer] right;
}

#Struct UISettings {
    Boolean hide;
    Integer speed;
    Integer showDelay;
    Real scale;
    Boolean sb_blur;
    Boolean viewer_count;
}

{include globals}

declare Vec2 widgetBasePosition;
declare CMlFrame widget;
declare CMlQuad bg;
declare Boolean left__;
declare Integer slot__;
--></script>

    <frame pos="0 0" id="widget" size="{include size}" z-index="50" hidden="1">
        {include content}
    </frame>

    <script><!--
    Void rearrange__(){
        declare WidgetGrid grid_ for This;
        declare WidgetRow[Integer] column;
        declare UISettings settings for This;
        declare Real scale = settings.scale;

        if(settings.speed == 0){
            settings.hide = True;
            settings.showDelay = 0;
            settings.speed = 10;
            settings.scale = 1.0;
        }

        if(scale < 0.75){
            scale = 1.0;
        }
        if(scale > 1.2){
            scale = 1.2;
        }

        declare Real gutter = 1.0 * scale;
        widget.RelativeScale = scale;

        declare width = widget.Size[0] * widget.RelativeScale;
        declare height = widget.Size[1] * widget.RelativeScale;

        if(left__){
            column = grid_.left;
        }else{
            column = grid_.right;
        }

        declare heights = 0.0;
        declare widths = 0.0;
        declare count = 0;

        for(i, 1, slot__ - 1){
            if(!column.existskey(i)){
                continue;
            }
            if(!column[i].visible){
                continue;
            }

            if(column[i].slot != slot__){
                heights += column[i].height * scale;
                count += 1;
            }
        }

        {if isset($slotHorizontal)}
        for(i, 1, {$slotHorizontal}){
            if(!column.existskey(slot__)){
                continue;
            }
            if(!column[slot__].widths.existskey(i)){
                continue;
            }
            widths += column[slot__].widths[i] + gutter;
        }
        widths *= scale;
        declare newX = 0.0;
        if(left__){
            newX = -160.0 + widths + gutter;
        }else{
            newX = 160.0 - widths + gutter;
        }
        {else}
        declare newX = 160.0 - width;
        if(left__){
            newX = -160.0;
        }
        {/if}

        declare newY = 90.0 - heights - (gutter * count) - 2.5;
        widgetBasePosition = <newX, newY>;
        if(widget.RelativePosition_V3[1] != newY || widget.RelativePosition_V3[0] != newX){
            declare posString = newX ^ " " ^ newY;
            AnimMgr.Add(widget, """<frame pos='""" ^ posString ^ """' />""", 500, CAnimManager::EAnimManagerEasing::ExpOut);
        }
    }

    Void widgetSetHeight__(Real newHeight){
        declare Integer LastUiUpdate for This = 0;
        declare WidgetGrid grid_ for This;
        declare Real height = newHeight;
        if(height == 0.0){
            height = -1.0;
        }
        if(left__){
            if(!grid_.left.existskey(slot__)) return;
            grid_.left[slot__].height = height;
        }else{
            if(!grid_.right.existskey(slot__)) return;
            grid_.right[slot__].height = height;
        }
        //AnimMgr.Add(widget, "<frame size='" ^ widget.Size[0] ^ " " ^ newHeight ^ "' />", 250, CAnimManager::EAnimManagerEasing::ExpOut);
        //sleep(250);
        widget.Size[1] = newHeight;
        LastUiUpdate = GameTime;
    }

    Void setup__(){
        declare WidgetGrid grid_ for This;
        declare Integer LastUiUpdate for This = 0;

        if(left__){
            if(grid_.left.count == 0){
                grid_.left = WidgetRow[Integer];
            }
            if(!grid_.left.existskey(slot__)){
                declare WidgetRow wr;
                wr.height = 0.0;
                wr.visible = True;
                wr.slot = slot__;
                grid_.left[slot__] = wr;
            }
            declare height = widget.Size[1] * widget.RelativeScale;
            if(height > grid_.left[slot__].height){
                grid_.left[slot__].height = height;
            }
            widgetSetHeight__(height);
            grid_.left[slot__].visible = True;
            {if isset($slotHorizontal)}
            declare width = widget.Size[0] * widget.RelativeScale;
            grid_.left[slot__].widths[{$slotHorizontal}] = width;
            {/if}
        }else{
            if(grid_.right.count == 0){
                grid_.right = WidgetRow[Integer];
            }
            if(!grid_.right.existskey(slot__)){
                declare WidgetRow wr;
                wr.height = 0.0;
                wr.visible = True;
                wr.slot = slot__;
                grid_.right[slot__] = wr;
            }
            declare height = widget.Size[1] * widget.RelativeScale;
            if(height > grid_.right[slot__].height){
                grid_.right[slot__].height = height;
            }
            widgetSetHeight__(height);
            grid_.right[slot__].visible = True;
            {if isset($slotHorizontal)}
            declare width = widget.Size[0] * widget.RelativeScale;
            grid_.right[slot__].widths[{$slotHorizontal}] = width;
            {/if}
        }
    }

    Void hs_hide(Integer duration){
        declare Real x;
        if(widgetBasePosition[0] < 0.0){
            x = (widget.Size[0] * -widget.RelativeScale) - 322.0;
        }else{
            x = 322.0;
        }
        AnimMgr.Add(widget, "<frame pos='" ^ x ^ " " ^ widgetBasePosition[1] ^ "' />", duration, CAnimManager::EAnimManagerEasing::ExpInOut);
    }

    Void hs_show(Integer duration){
        AnimMgr.Add(widget, "<frame pos='" ^ widgetBasePosition[0] ^ " " ^ widgetBasePosition[1] ^ "' />", duration, CAnimManager::EAnimManagerEasing::CircOut);
    }
    --></script>

    {include script}

    <script><!--
    main() {
        declare Boolean EvoSC_UI_Hidden for This = False;
        declare Integer EvoSC_UI_HiddenUpdate for This;
        declare lastHiddenUpdate = 0;
        declare WidgetGrid grid_ for This;
        declare Integer LastUiUpdate for This = 0;
        declare Integer lastUiUpdate;

        if(LastUiUpdate == 0){
            LastUiUpdate = GameTime;
            lastUiUpdate = LastUiUpdate;
        }

        widget <=> (Page.MainFrame.GetFirstChild("widget") as CMlFrame);
        bg <=> (Page.MainFrame.GetFirstChild("bg") as CMlQuad);

        {include bootScript}

        widget.Hide();
        setup__();
        LastUiUpdate = GameTime;
        rearrange__();
        sleep(300);
        widget.Show();

        while(True){
            yield;

            foreach(event in PendingEvents){
                if(event.Control == Null) continue;

                {include pendingEvents}
            }

            {include loop}

            {if !isset($dontHide)}
            if(lastHiddenUpdate != EvoSC_UI_HiddenUpdate){
                lastHiddenUpdate = EvoSC_UI_HiddenUpdate;
                if(EvoSC_UI_Hidden){
                    {$customHideMethod ?? 'hs_hide'}(800);
                }else{
                    {$customShowMethod ?? 'hs_show'}(600);
                }
            }
            {/if}

            if(lastUiUpdate != LastUiUpdate){
                lastUiUpdate = LastUiUpdate;
                rearrange__();
            }
        }
    }
    --></script>
</manialink>
