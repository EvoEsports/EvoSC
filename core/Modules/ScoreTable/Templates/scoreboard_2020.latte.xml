{contentType text}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink name="EvoSC:scoretable" layer="ScoresTable" id="scoretable" version="3">
    {include 'Components.stylesheet_noblur'}

    <frame id="main-frame" pos="-87.5 14" z-index="500" scale="1">
        {php $layoutId = \EvoSC\Modules\ScoreTable\ScoreTable::getLayoutId($mode)}
        {include $layoutId}
    </frame>

    <script><!--
    #Include "MathLib" as ML
    #Include "TextLib" as TL
    #Include "ColorLib" as CL
    #Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/ScoresTable_Common.Script.txt" as UIModules_ScoresTable
    #Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Constants
    #Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools

    #Const SB_Update_Interval 100
    #Const SB_Button_Padding 1
    #Const C_Status_Disconnected	0
    #Const C_Status_Spawned			1
    #Const C_Status_NotSpawned		2
    #Const C_Status_Spectating		3

    #Const UIModules_ScoresTable::C_Mode_BestTime as C_Mode_BestTime
    #Const UIModules_ScoresTable::C_Mode_PrevTime as C_Mode_PrevTime
    #Const UIModules_ScoresTable::C_Mode_LapTime as C_Mode_LapTime
    #Const UIModules_ScoresTable::C_Mode_Points as C_Mode_Points
    #Const UIModules_ScoresTable::C_Mode_Laps as C_Mode_Laps
    #Const UIModules_ScoresTable::C_Mode_Trophy as C_Mode_Trophy
    #Const UIModules_ScoresTable::C_Mode_RaceProgression as C_Mode_RaceProgression

    #Struct EvoSC_Group {
        Text name;
        Text icon;
        Text color;
    }

    #Struct EvoSC_User {
        Text login;
        Text name;
        Integer groupId;
    }

    #Struct K_Trophy {
        Integer Level;
        Integer Amount;
    }

    declare Vec3 SB_Team1_Color;
    declare Vec3 SB_Team2_Color;
    declare CMlFrame mainFrame;
    declare CMlFrame[] boxes;
    declare Integer page;
    declare Integer perPage;
    declare Boolean forceUpdate;
    declare Integer SB_Last_Update;

*** SB_SetPlayerCount ***
***
    declare playerInfoLabel <=> (Page.MainFrame.GetFirstChild("player-info") as CMlLabel);
    playerInfoLabel.Value = Players.count ^ "/{$maxPlayers}";
    {if $roundsPerMap > 0}
    declare Integer EvoSC_Round for This = 1;
    playerInfoLabel.Value = playerInfoLabel.Value ^ "\tïƒ¢ " ^ EvoSC_Round ^ "/{$roundsPerMap}";
    {/if}
***

*** SB_Slot_Update ***
***
log("implement me");
***
    --></script>

    {include 'Dialogues.confirm'}
    {include 'Scripts.mle'}

    <frame>
        <script><!--
    Integer SB_GetMaxPage(){
        if(Scores.count % perPage == 0){
            return ML::NearestInteger(Scores.count / perPage * 1.0);
        }

        return ML::CeilingInteger(Scores.count / perPage * 1.0);
    }

    Void SB_GoPageDown(){
        page -= 1;
        if(page < 1){
            page = SB_GetMaxPage();
        }
        SB_Last_Update -= SB_Update_Interval;
    }

    Void SB_GoPageUp(){
        page += 1;
        if(page > SB_GetMaxPage()){
            page = 1;
        }
        SB_Last_Update -= SB_Update_Interval;
    }

    Text formatScoreCorrect(Integer scoreIn, Boolean cutZeroes){
        declare Text secondString;
        declare Text msString;
        declare Integer score;

        score = scoreIn;

        if(score < 0){
            score = -score;
        }

        declare Integer seconds = score / 1000;
        declare Integer minutes = seconds / 60;
        declare Integer ms = score - (seconds * 1000);

        seconds = seconds - (minutes * 60);

        secondString = "" ^ seconds;

        if(seconds < 10 && minutes > 0){
            secondString = "0" ^ seconds;
        }

        if(ms == 0){
            msString = "000";
        }else if(ms > 0 && ms < 10){
            msString = "00" ^ ms;
        }else if(ms >= 10 && ms < 100){
            msString = "0" ^ ms;
        }else{
            msString = "" ^ ms;
        }

        if(cutZeroes && minutes == 0){
            return secondString ^ "." ^ msString;
        }

        return minutes ^ ":" ^ secondString ^ "." ^ msString;
    }

    Integer getUserGroupId(Text login){
        declare EvoSC_User[Text] EvoSC_Players for This;
        if(EvoSC_Players.existskey(login)){
            return EvoSC_Players[login].groupId;
        }

        return -1;
    }

    EvoSC_Group getGroup(Text login){
        declare EvoSC_Group[Integer] EvoSC_Groups for This;
        declare groupId = getUserGroupId(login);

        if(EvoSC_Groups.existskey(groupId)){
            return EvoSC_Groups[groupId];
        }

        declare EvoSC_Group group;
        return group;
    }

    Void flashBox(CMlControl box){
        AnimMgr.Add(box, "<quad opacity='0.8' />", 220, CAnimManager::EAnimManagerEasing::ExpOut);
        AnimMgr.Add(box, "<quad opacity='0.0' />", Now+220, 220, CAnimManager::EAnimManagerEasing::ExpOut);
    }

    Void ApplyTrophyImage(CMlQuad _Quad_Tropy, Integer _Level) {
        switch (_Level) {
            case 1: _Quad_Tropy.ImageUrl  = Constants::C_ImageUrl_Trophy_128_Bronze1;
            case 2: _Quad_Tropy.ImageUrl  = Constants::C_ImageUrl_Trophy_128_Bronze2;
            case 3: _Quad_Tropy.ImageUrl  = Constants::C_ImageUrl_Trophy_128_Bronze3;
            case 4: _Quad_Tropy.ImageUrl  = Constants::C_ImageUrl_Trophy_128_Silver1;
            case 5: _Quad_Tropy.ImageUrl  = Constants::C_ImageUrl_Trophy_128_Silver2;
            case 6: _Quad_Tropy.ImageUrl  = Constants::C_ImageUrl_Trophy_128_Silver3;
            case 7: _Quad_Tropy.ImageUrl  = Constants::C_ImageUrl_Trophy_128_Gold1;
            case 8: _Quad_Tropy.ImageUrl  = Constants::C_ImageUrl_Trophy_128_Gold2;
            case 9: _Quad_Tropy.ImageUrl  = Constants::C_ImageUrl_Trophy_128_Gold3;
            default: _Quad_Tropy.ImageUrl = Constants::C_ImageUrl_Trophy_128_None;
        }
    }

    Integer[CSmScore] GetSortedScores() {
        declare persistent Boolean[Text] LibScoresTable2_Settings for This;
        declare SortedScores = Integer[CSmScore];
        declare c = 0;

        foreach (Score in Scores) {
            declare LibST_Status for Score.User = C_Status_Disconnected;
            declare Weight = c;
            if (
                LibScoresTable2_Settings.existskey("SortSpec") &&
                LibScoresTable2_Settings["SortSpec"] &&
                LibST_Status == C_Status_Spectating
            ) Weight += Scores.count;
            if (
                LibScoresTable2_Settings.existskey("SortDisco") &&
                LibScoresTable2_Settings["SortDisco"] &&
                LibST_Status == C_Status_Disconnected
            ) Weight += 2 * Scores.count;
            SortedScores[Score] = Weight;
            c += 1;
        }

        return SortedScores.sort();
    }

    Void updateSlot(CMlFrame slot, CSmScore score, Integer rank){
        +++ SB_Slot_Declarations +++
        --- SB_Slot_Update ---
    }

    Void updateScoreTable(){
        (Page.MainFrame.GetFirstChild("page") as CMlLabel).Value = page ^ "/" ^ SB_GetMaxPage();

        foreach (Player in Players) {
            declare LibST_LastTick for Player.User = -1;
            LibST_LastTick = Now;
            declare LibST_Status for Player.User = C_Status_Disconnected;
            if (Player.RequestsSpectate && LibST_Status != C_Status_Spectating) {
                LibST_Status = C_Status_Spectating;
            }
            if (!Player.RequestsSpectate && LibST_Status != C_Status_Spawned) {
                LibST_Status = C_Status_Spawned;
            }
        }

        (Page.MainFrame.GetFirstChild("server-name") as CMlLabel).Value = CurrentServerName;

        --- SB_SetPlayerCount ---

        declare modeLabel <=> (Page.MainFrame.GetFirstChild("mode-name") as CMlLabel);
        declare Integer EvoSC_PointsLimit for This = 0;
        modeLabel.Value = CurrentServerModeName;

        declare netread Integer Net_TMxSM_ScoresTable_ScoreMode for Teams[0];
        if(Net_TMxSM_ScoresTable_ScoreMode == C_Mode_Points && EvoSC_PointsLimit > 0){
            modeLabel.Value = modeLabel.Value ^ " (Point-Limit: " ^ EvoSC_PointsLimit ^ ")";
        }

        +++ SB_SetScores +++
    }

    Void handlePadEvents(){
        declare Boolean findMe for This = False;
        foreach (Event in Input.PendingEvents) {
            if (Event.Type == CInputEvent::EType::PadButtonPress && Event.Pad != Null && Event.Pad.Type != CInputPad::EPadType::Keyboard){
                if(Event.Button == CInputEvent::EButton::Left){
                    SB_GoPageDown();
                    continue;
                }
                if(Event.Button == CInputEvent::EButton::Right){
                    SB_GoPageUp();
                    continue;
                }
                if(Event.Button == CInputEvent::EButton::Down){
                    findMe = True;
                    continue;
                }
                if(Event.Button == CInputEvent::EButton::Up){
                    page = 1;
                    forceUpdate = True;
                    updateScoreTable();
                    continue;
                }
            }
        }
    }

    Void SB_ShowControls(CMlFrame slot_){
        +++ SB_MouseOverSlot +++
    }

    main() {
        page = 1;
        perPage = 12;

        +++ SB_Boot +++

        forceUpdate = True;
        SB_Last_Update = 0;
        declare Boolean findMe for This = False;
        declare netread Integer[Integer][Text] Net_TMxSM_ScoresTable_Trophies for Teams[0];
        declare netread Integer Net_TMxSM_ScoresTable_TrophiesUpdate for Teams[0];
        declare TrophiesUpdate = -1;

        while(True){
            yield;

            if(GameTime - SB_Last_Update > SB_Update_Interval && PageIsVisible){
                forceUpdate = True;
                updateScoreTable();
                SB_Last_Update = GameTime;
            }

            if (TrophiesUpdate != Net_TMxSM_ScoresTable_TrophiesUpdate) {
                TrophiesUpdate = Net_TMxSM_ScoresTable_TrophiesUpdate;
                foreach (Score in Scores) {
                    declare K_Trophy[] LibTMxSM_ScoresTable_Trophies for Score = [];
                    LibTMxSM_ScoresTable_Trophies = [];
                    if (Net_TMxSM_ScoresTable_Trophies.existskey(Score.User.WebServicesUserId)) {
                        declare Integer[Integer] NewTrophies = Net_TMxSM_ScoresTable_Trophies[Score.User.WebServicesUserId].sortkeyreverse();
                        foreach (TrophyLevel => TrophyAmount in NewTrophies) {
                            if (TrophyAmount > 0) {
                                LibTMxSM_ScoresTable_Trophies.add(K_Trophy {
                                    Level = TrophyLevel,
                                    Amount = TrophyAmount
                                });
                            }
                        }
                    }
                }
            }

            if(findMe){
                findMe = False;
                declare i = 0;
                foreach(Score => Weight in GetSortedScores()){
                    if(Score.User.Login == LocalUser.Login){
                        break;
                    }
                    i += 1;
                }
                page = ML::FloorInteger(i / perPage * 1.0) + 1;
                forceUpdate = True;
                updateScoreTable();
                sleep(40);
                declare fillableSlotsFrame <=> (Page.MainFrame.GetFirstChild("fillable_slots") as CMlFrame);
                declare slot = (fillableSlotsFrame.Controls[i % perPage] as CMlFrame);
                flashBox(slot.GetFirstChild("me"));
            }

            +++ SB_Loop +++

            foreach(Event in PendingEvents){
                if(Event.Control == Null) continue;

                +++ SB_PendingEvents +++

                if(Event.Type == CMlScriptEvent::Type::MouseClick){
                    if(Event.Control.HasClass("prev-page")){
                        SB_GoPageDown();
                        continue;
                    }
                    if(Event.Control.HasClass("next-page")){
                        SB_GoPageUp();
                        continue;
                    }
                }
            }
        }
    }
    --></script>
    </frame>
</manialink>