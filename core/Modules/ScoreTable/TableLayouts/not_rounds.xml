{contentType text}
<frame>
    <framemodel id="button">
        <quad class="btn" size="260 142" scale="0.04" image="http://maniacdn.net/tmexperte/evosc/scoreboard_button_260x142.png" colorize="{config('theme.hud.bg-light')}" opacity="0.05" ScriptEvents="1" />
        <label class="text-light" halign="center" valign="center" size="9.2 5.5" pos="5 -1.65" textsize="0.3" z-index="1"/>
        <label class="text-light" halign="center" valign="center" size="9.2 5.5" pos="5 -3.8" scale="0.75" z-index="1"/>
    </framemodel>

    <framemodel id="framemodel-trophy">
        <label id="label-trophy" class="text-default text-light" pos="-3.5 -2.5" z-index="1" halign="center" size="5 5" textsize="2.2" textprefix="$i" opacity="0.9" />
        <quad id="quad-trophy" class="quad-base" z-index="0" pos="-2 0.2" size="8 7" halign="left" />
    </framemodel>

    <framemodel id="top">
        <quad id="avatar" pos="-1 -2" valign="center" size="10.75 7.8" z-index="6" scale="0.6" />
        <label id="name" class="text-light" pos="7 0" text="Leading Player" textsize="2.6" />
        <label class="text-lighter" pos="-2 -13" valign="center" text="" textsize="2" z-index="5" />
        <quad pos="4 -13" size="40 4" valign="center" class="bg-light" opacity="0.2" />
        <quad pos="4 -13" size="30 4" valign="center" class="bg-lighter" z-index="5" />
    </framemodel>

    <framemodel id="box" data-size="100 12">
        <label id="name" class="text-light" pos="15.25 -4.5" size="25 3" z-index="5" scale="1.2"/>
        <label id="group_icon" class="text-light" pos="60 -6" scale="0.9" size="3 3" z-index="5" valign="center" halign="center" opacity="0.85" hidden="1"/>
        <frame id="badge" size="15 10" pos="9.3 -5.6" halign="center" valign="center" z-index="5" scale="1.1" hidden="1">
            <quad pos="-3 5" size="50 7" bgcolor="aaa2" halign="center" valign="center" rot="-45" z-index="-2" opacity="0"/>
            <label pos="-4.9 2.75" size="5 5" halign="center" valign="center" text="" textsize="1" scale="0.7" textcolor="888"/>
        </frame>
        <label id="rank" class="text-light" pos="0.55 -5.5" size="10 10" textsize="1.1" scale="1.4" z-index="5" halign="center" valign="center"/>
        <label id="score" class="text-light" pos="87 -2.5" size="20 3" scale="1.3" z-index="5" halign="right"/>
        <quad id="avatar" pos="7 -5.9" valign="center" size="10.75 8.8" z-index="6" scale="0.6" />
        <label id="group_name" class="text-light" pos="62 -6" size="19.5 3" scale="0.9" valign="center" opacity="0.75" z-index="5" hidden="1"/>
        <label id="custom_label" class="text-light" pos="86 -8" halign="right" valign="center" text="ERROR" opacity="0.85" textsize="0.8" />

        <frame id="actions" pos="7.25 -5.25" hidden="1" z-index="10">
            <frameinstance modelid="button" data-action="spec" data-icon="" data-access="" data-text="Spec" autonewline="1" size="9.2 5.5" textsize="0.05"></frameinstance>
            <frameinstance modelid="button" data-action="profile" data-icon="" data-access="" data-text="Profile" autonewline="1" size="9.2 5.5" textsize="0.05"></frameinstance>
            <frameinstance modelid="button" data-action="pm" data-icon="" data-access="" data-text="PM" autonewline="1" size="9.2 5.5" textsize="0.05"></frameinstance>
            <frameinstance modelid="button" data-action="mute" data-icon="" data-access="player_mute" data-text="Mute" autonewline="1" size="9.2 5.5" textsize="0.05"></frameinstance>
            <frameinstance modelid="button" data-action="ban" data-icon="" data-access="player_ban" data-text="Ban" autonewline="1" size="9.2 5.5" textsize="0.05"></frameinstance>
            <frameinstance modelid="button" data-action="kick" data-icon="" data-access="player_kick" data-text="Kick" autonewline="1" size="9.2 5.5" textsize="0.05"></frameinstance>
            <frameinstance modelid="button" data-action="warn" data-icon="" data-access="player_warn" data-text="Warn" autonewline="1" size="9.2 5.5" textsize="0.05"></frameinstance>
            <frameinstance modelid="button" data-action="force_spec" data-icon="" data-access="player_force_spec" data-text="Force Spec" autonewline="1" size="9.2 5.5" textsize="0.05"></frameinstance>
        </frame>

        <frame id="frame-trophies" pos="86 -6.25" scale="0.7">
            <frame id="frame-trophies-style-2">
                <frameinstance modelid="framemodel-trophy" pos="-26 0" />
                <frameinstance modelid="framemodel-trophy" pos="-15 0" />
                <frameinstance modelid="framemodel-trophy" pos="-4 0" />
            </frame>
            <frame id="frame-trophies-style-1" pos="-7 0">
                <quad id="quad-best-trophy" class="text-light" halign="center" valign="center" pos="1.5 0.2" z-index="1" size="9 9" autoscale="0" />
                <label id="label-big-trophy" class="text-light" valign="center2" pos="-14.5 0" z-index="2" halign="right" size="7 10" textprefix="$i" />
                <label id="label-small-trophy" class="text-light" valign="center2" pos="-15 -0.4" z-index="2" halign="left" size="7 10" textprefix="$i" textsize="2" />
            </frame>
        </frame>

        <quad id="bg_rank" size="355 300" pos="-4.9 -1.41" scale="0.031" image="http://maniacdn.net/tmexperte/evosc/scoreboard_pos_355x300.png" colorize="{config('theme.hud.bg-darker')}" opacity="0.4" />
        <quad id="bg_slot" size="2000 128" pos="90 -6" halign="center" scale="0.097" valign="center" image="file://Media/Manialinks/Nadeo/TMNext/Modes/Race/HUD_scorestable_line_unfocus_02.dds" colorize="{config('theme.hud.bg-darker')}" opacity="0.2" />
        <quad id="trigger" class="trigger" size="2000 128" pos="90 -6" halign="center" scale="0.097" valign="center" image="file://Media/Manialinks/Nadeo/TMNext/Modes/Race/HUD_scorestable_line_unfocus_02.dds" colorize="{config('theme.hud.bg-darker')}" opacity="0.2" ScriptEvents="1" />

        <label class="text-lighter" pos="154 -6" valign="center" text="" textsize="2" z-index="5" />
        <quad pos="160 -6" size="20 2" valign="center" class="bg-light" opacity="0.2" />
        <quad pos="160 -6" size="10 2" valign="center" class="bg-lighter" z-index="5" />

        <label class="text-lighter" pos="125 -5.75" valign="center" text="  0.23.123" textsize="1.8" z-index="5" />
    </framemodel>

    <frame z-index="-10" pos="87.5 -14">
        {php $bodyWidth = 280;}
        {php $bodyHeight = 170;}
        <!-- Body -->
        <frame>
            <quad size="{$bodyWidth} {$bodyHeight}" scale="0.8" halign="center" valign="center" image="file://Media/Manialinks/Nadeo/TMNext/Modes/Race/HUD_scorestable_header.dds" colorize="{config('theme.hud.bg-dark')}" opacity="0.85" />
        </frame>
        <!-- Top 3 -->
        <frame pos="-100 68" size="1000 49.5">
            <quad pos="100 -68" size="{$bodyWidth} {$bodyHeight}" scale="0.8" halign="center" valign="center" image="file://Media/Manialinks/Nadeo/TMNext/Modes/Race/HUD_scorestable_body.dds" colorize="{config('theme.hud.accent')}" opacity="0.95" />
        </frame>
        <!-- Body -->
        <frame pos="-250 17.75" size="1000 1000">
            <quad pos="250 -17.75" size="{$bodyWidth} {$bodyHeight}" scale="0.8" halign="center" valign="center" image="file://Media/Manialinks/Nadeo/TMNext/Modes/Race/HUD_scorestable_body.dds" colorize="{config('theme.hud.bg-dark')}" opacity="0.85" />
        </frame>
    </frame>

    <frame id="header-frame" pos="5.5 30" z-index="1">
        <quad pos="21 6" valign="center" halign="left" size="52 52" scale="0.95" image="https://i.imgur.com/K0ZnSM2.png" keepratio="Fit"/>
        <quad pos="-8.05 10" valign="center" halign="left" size="715 331" scale="0.072" image="https://i.imgur.com/XmIMLgu.png" colorize="{config('theme.hud.accent')}" opacity="0.67"/>
        <label id="server-name" class="text-light" pos="71 14" size="60 6" scale="1.8" hidden="1" />
        <label id="mode-name" class="text-light" pos="70.5 8.5" size="60 6" scale="0.9" textcolor="{config('theme.hud.accent')}" textprefix="$sMode: " hidden="1" />

        <frame pos="170 8">
            <label id="player-info" class="text-light" pos="0 0" valign="center" halign="center" textsize="4.4"/>
            <label class="text-accent" pos="0 6" valign="center" halign="center" textsize="1.4" text=" PLAYERS"/>
            <label id="round-info" class="text-light" pos="-25 0" valign="center" halign="center" textsize="4.4" text="1/10"/>
            <label class="text-accent" pos="-25 6" valign="center" halign="center" textsize="1.4" text=" ROUND"/>
        </frame>

        <!-- Sponsor -->
        <frame pos="95 -0.5" scale="0.9">
            <quad pos="0 9.5" valign="center" halign="left" size="20 20" image="https://i.imgur.com/0WnsRqq.png" keepratio="Fit"/>
            <label class="text-lighter" pos="5.5 17" valign="center" halign="right" size="60 6" scale="1" opacity="0.75" text="SPONSORED BY
ONE SHOT
ENERGY" />
        </frame>
    </frame>

    <frame id="fillable_slots" pos="-3 2" z-index="100">
        {for $i=0;$i<7;$i++}
        <frameinstance modelid="box" pos="{$i*-1.825 + 1} {$i * -10}" z-index="100" />
        {/for}
    </frame>

    <frame id="fillable_top_slots" pos="1 23.5">
        {for $i=0;$i<3;$i++}
        <frameinstance modelid="top" pos="{$i * 65} 0" />
        {/for}
    </frame>

    <frame pos="-22 -71.5" scale="1" z-index="1" hidden="0">
        <label id="prev-page" class="floating prev-page" text="" pos="4 0" size="5 5" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="0000" />
        <label id="page" class="text-light" text="1/1" pos="10 0" textsize="2.5" size="10 5" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="0000" />
        <label id="next-page" class="floating next-page" text="" pos="18 0" size="5 5" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="0000" />
        <label id="me" class="floating me" text="" pos="24.3 0" textsize="2.5" size="5 5"  ScriptEvents="1" focusareacolor1="0000" focusareacolor2="0000" />
    </frame>
</frame>

<script><!--
*** SB_Slot_Declarations ***
***
    declare actionsFrame <=> (slot.GetFirstChild("actions") as CMlFrame);
    declare nameLabel <=> (slot.GetFirstChild("name") as CMlLabel);
    declare groupIconLabel <=> (slot.GetFirstChild("group_icon") as CMlLabel);
    declare groupNameLabel <=> (slot.GetFirstChild("group_name") as CMlLabel);
    declare rankLabel <=> (slot.GetFirstChild("rank") as CMlLabel);
    declare scoreLabel <=> (slot.GetFirstChild("score") as CMlLabel);
    declare customLabel <=> (slot.GetFirstChild("custom_label") as CMlLabel);
    declare badgeFrame = (slot.GetFirstChild("badge") as CMlFrame);
    declare bgRankQuad = (slot.GetFirstChild("bg_rank") as CMlQuad);
    declare bgSlotQuad = (slot.GetFirstChild("bg_slot") as CMlQuad);
    declare avatarQuad = (slot.GetFirstChild("avatar") as CMlQuad);
    declare badgeQuad <=> (badgeFrame.Controls[0] as CMlQuad);
    declare badgeLabel <=> (badgeFrame.Controls[1] as CMlLabel);
    declare trigger <=> (slot.GetFirstChild("trigger") as CMlLabel);
***

*** SB_Boot ***
***
log("start");
***

Void setupButtons(CMlFrame actionsFrame){
    declare Text[] EvoSC_Access_Rights for This;
    declare widths = 0.0;

    foreach(Control in actionsFrame.Controls){
        declare buttonFrame <=> (Control as CMlFrame);
        declare quad = (buttonFrame.Controls[0] as CMlQuad);
        declare icon = (buttonFrame.Controls[1] as CMlLabel);
        declare label = (buttonFrame.Controls[2] as CMlLabel);

        quad.DataAttributeSet("access", buttonFrame.DataAttributeGet("access"));
        quad.DataAttributeSet("action", buttonFrame.DataAttributeGet("action"));
        quad.Opacity = 0.05;

        if(buttonFrame.DataAttributeGet("icon") != ""){
            icon.Value = buttonFrame.DataAttributeGet("icon");
            label.Value = buttonFrame.DataAttributeGet("text");
            buttonFrame.DataAttributeSet("icon", "");
        }

        declare access = buttonFrame.DataAttributeGet("access");
        if(access != ""){
            if(!EvoSC_Access_Rights.exists(access)){
                buttonFrame.Visible = False;
            }
        }

        if(buttonFrame.Visible){
            declare Real width = 9.75;
            buttonFrame.RelativePosition_V3[0] = widths - 5.5;
            widths += width + 1.25;
        }
    }
}

Void showControls(CMlFrame slot_){
    declare CMlFrame slot = slot_;
    +++ SB_Slot_Declarations +++
    setupButtons(actionsFrame);
    AnimMgr.Add(nameLabel, "<label pos='27 -1.5' scale='0.9' />", 320, CAnimManager::EAnimManagerEasing::ExpOut);
    AnimMgr.Add(groupIconLabel, "<label pos='50 -2.5' scale='0.8' />", 320, CAnimManager::EAnimManagerEasing::ExpOut);
    AnimMgr.Add(rankLabel, "<label pos='7 -2.4' scale='0.85' />", 320, CAnimManager::EAnimManagerEasing::ExpOut);
    AnimMgr.Add(scoreLabel, "<label pos='87 -1.5' scale='0.9' halign='left' />", 320, CAnimManager::EAnimManagerEasing::ExpOut);
    AnimMgr.Add(customLabel, "<label pos='19 -1.5' scale='0.9' />", 320, CAnimManager::EAnimManagerEasing::ExpOut);
    AnimMgr.Add(groupNameLabel, "<label pos='52 -2.5' scale='0.8' />", 320, CAnimManager::EAnimManagerEasing::ExpOut);
    //AnimMgr.Add(groupIconLabel, "<label pos='63 -2.5' />", 320, CAnimManager::EAnimManagerEasing::ExpOut);
    //AnimMgr.Add((slot.Controls[7] as CMlLabel), "<label pos='66.25 -2.5' scale='0.8' />", 320, CAnimManager::EAnimManagerEasing::ExpOut);
    AnimMgr.Add(avatarQuad, "<quad opacity='0.0' />", 190, CAnimManager::EAnimManagerEasing::ExpOut);
    AnimMgr.Add(bgRankQuad, "<quad opacity='0.0' />", 190, CAnimManager::EAnimManagerEasing::ExpOut);
    actionsFrame.Show();
    trigger.Hide();

    declare Real xMin = slot.AbsolutePosition_V3[0];
    declare Real xMax = slot.AbsolutePosition_V3[0] + slot.Size[0];
    declare Real yMin = slot.AbsolutePosition_V3[1] - 12.0;
    declare Real yMax = slot.AbsolutePosition_V3[1];

    declare Boolean ESC_Tab_Pressed for This;

    while(MouseX > xMin && MouseX < xMax && MouseY < yMax && MouseY > yMin && ESC_Tab_Pressed){
        //handlePadEvents();

        foreach(Event in PendingEvents){
            if(Event.Control == Null) continue;
            if(Event.Control.HasClass("btn") && Event.Type == CMlScriptEvent::Type::MouseOver){
                declare btnBackground <=> (Event.Control as CMlQuad);
                btnBackground.Opacity = 0.25;
            }
            if(Event.Control.HasClass("btn") && Event.Type == CMlScriptEvent::Type::MouseOut){
                declare btnBackground <=> (Event.Control as CMlQuad);
                btnBackground.Opacity = 0.05;
            }
            if(Event.Control.HasClass("btn") && Event.Type == CMlScriptEvent::Type::MouseClick){
                declare btnLabel <=> (Event.Control as CMlLabel);
                declare targetLogin = btnLabel.Parent.Parent.Parent.DataAttributeGet("login");

                if(Event.Control.DataAttributeGet("action") == "spec"){
                    if(!IsSpectatorClient) RequestSpectatorClient(True);
                    SetSpectateTarget(targetLogin);
                    continue;
                }
                if(Event.Control.DataAttributeGet("action") == "pm"){
                    TriggerPageAction("pm.dialog," ^ targetLogin);
                    continue;
                }
                if(Event.Control.DataAttributeGet("action") == "mute"){
                    TriggerPageAction("mute," ^ targetLogin);
                    continue;
                }
                if(Event.Control.DataAttributeGet("action") == "kick"){
                    if(confirm("Kick " ^ targetLogin ^ "$z from the server?")){
                        TriggerPageAction("kick," ^ targetLogin);
                    }
                    continue;
                }
                if(Event.Control.DataAttributeGet("action") == "force_spec"){
                    TriggerPageAction("forcespec," ^ targetLogin);
                    continue;
                }
                if(Event.Control.DataAttributeGet("action") == "ban"){
                    TriggerPageAction("banui.search," ^ targetLogin);
                    continue;
                }
                if(Event.Control.DataAttributeGet("action") == "warn"){
                    if(confirm("Warn player " ^ targetLogin ^ "$z?")){
                        TriggerPageAction("warn," ^ targetLogin ^ ",");
                    }
                    continue;
                }
                if(Event.Control.DataAttributeGet("action") == "profile"){
                    declare Text LibTMxSMRaceScoresTable_OpenProfileLogin for ClientUI = "";
                    LibTMxSMRaceScoresTable_OpenProfileLogin = targetLogin;
                }
            }
        }

        yield;
    }

    actionsFrame.Hide();
    trigger.Show();
    AnimMgr.Add(nameLabel, "<label pos='26.26 -2.5' scale='1.3' />", 320, CAnimManager::EAnimManagerEasing::ExpOut);
    AnimMgr.Add(groupIconLabel, "<label pos='27 -8' scale='0.9' />", 320, CAnimManager::EAnimManagerEasing::ExpOut);
    AnimMgr.Add(rankLabel, "<label pos='7 -5.5' scale='2' />", 320, CAnimManager::EAnimManagerEasing::ExpOut);
    AnimMgr.Add(scoreLabel, "<label pos='87 -2.5' scale='1.2' halign='right' />", 320, CAnimManager::EAnimManagerEasing::ExpOut);
    AnimMgr.Add(groupNameLabel, "<label pos='28.5 -8' scale='0.9' />", 320, CAnimManager::EAnimManagerEasing::ExpOut);
    AnimMgr.Add(customLabel, "<label pos='25 -7' scale='1' />", 320, CAnimManager::EAnimManagerEasing::ExpOut);
    AnimMgr.Add(avatarQuad, "<quad opacity='1.0' />", 640, CAnimManager::EAnimManagerEasing::ExpOut);
    AnimMgr.Add(bgRankQuad, "<quad opacity='0.2' />", 640, CAnimManager::EAnimManagerEasing::ExpOut);
    //AnimMgr.Add(groupIconLabel, "<label pos='63 -7.7' />", 320, CAnimManager::EAnimManagerEasing::ExpOut);
    //AnimMgr.Add((slot.Controls[7] as CMlLabel), "<label pos='66.25 -7.5' scale='0.9' />", 320, CAnimManager::EAnimManagerEasing::ExpOut);
}

Void updateSlot(CMlFrame slot, CSmScore Score, Integer rank){
    +++ SB_Slot_Declarations +++
    declare login = Score.User.Login;
    declare name = Score.User.Name;
    declare groupIcon = "";
    declare groupName = "";
    declare custom = "";

    declare EvoSC_User[Text] EvoSC_Players for This;
    if(EvoSC_Players.existskey(login)){
        declare evoscPlayer = EvoSC_Players[login];
        name = evoscPlayer.name;

        declare EvoSC_Group[Integer] EvoSC_Groups for This;
        if(EvoSC_Groups.existskey(evoscPlayer.groupId)){
            declare group = EvoSC_Groups[evoscPlayer.groupId];
            groupIcon = "$" ^ group.color ^ group.icon;
            groupName = group.name;
        }
    }

    nameLabel.Value = name;
    rankLabel.Value = rank ^ "";
    groupIconLabel.Value = groupIcon;
    groupNameLabel.Value = groupName;
    avatarQuad.ImageUrl = "file://ZoneFlags/Login/" ^ Score.User.Login ^ "/country";
    avatarQuad.AlphaMaskUrl = "https://i.imgur.com/MgqRGzI.png";
    customLabel.Value = custom;
    bgRankQuad.Show();
    slot.DataAttributeSet("login", Score.User.Login);
}

Void updateSlotTop(CMlFrame slot, CSmScore Score, Integer rank){
    declare nameLabel <=> (slot.GetFirstChild("name") as CMlLabel);
    declare avatarQuad = (slot.GetFirstChild("avatar") as CMlQuad);
    declare login = Score.User.Login;
    declare name = Score.User.Name;

    declare EvoSC_User[Text] EvoSC_Players for This;
    if(EvoSC_Players.existskey(login)){
        declare evoscPlayer = EvoSC_Players[login];
        name = evoscPlayer.name;
    }

    nameLabel.Value = name;
    avatarQuad.ImageUrl = "file://ZoneFlags/Login/" ^ Score.User.Login ^ "/country";
    avatarQuad.AlphaMaskUrl = "https://i.imgur.com/MgqRGzI.png";
}

Void clearSlot(CMlFrame slot){
    +++ SB_Slot_Declarations +++
    nameLabel.Value = "";
    rankLabel.Value = "";
    customLabel.Value = "";
    bgRankQuad.Hide();
}

*** SB_SetScores ***
***
    declare fillableSlotsFrame <=> (Page.MainFrame.GetFirstChild("fillable_slots") as CMlFrame);
    declare topSlotsFrame <=> (Page.MainFrame.GetFirstChild("fillable_top_slots") as CMlFrame);
    declare slotsCount = fillableSlotsFrame.Controls.count;

    declare Integer[Text] EvoSC_RoundsPointsDistribution for This;
    declare rank = 1;
    declare filled = 0;
    declare skipped = 0;
    declare toSkip = (page - 1) * slotsCount;

    foreach(Score => Weight in GetSortedScores()){
        if(rank <= 3){
            updateSlotTop(topSlotsFrame.Controls[rank - 1] as CMlFrame, Score, rank);
        }

        if(skipped < toSkip){
            skipped += 1;
            continue;
        }

        if(filled >= slotsCount){ // divided by two because of background boxes
            return;
        }

        declare SlotNeedUpdate = False;
        declare LibST_LastTick for Score.User = -1;
        declare LibST_Status for Score.User = C_Status_Disconnected;
        if (LibST_LastTick != Now && LibST_Status != C_Status_Disconnected) {
            LibST_Status = C_Status_Disconnected;
            SlotNeedUpdate = True;
        }

        declare LibST_PrevStatus for Score.User = C_Status_Disconnected;
        if (LibST_PrevStatus != LibST_Status) {
            LibST_PrevStatus = LibST_Status;
            SlotNeedUpdate = True;
        }

        declare addedPoints = 0;
        if(EvoSC_RoundsPointsDistribution.existskey(Score.User.Login)){
            addedPoints = EvoSC_RoundsPointsDistribution[Score.User.Login];
        }

        declare LibST_PrevUpdate for Score = -1;
        declare netread Integer Net_LibST_Update for Score;
        if (LibST_PrevUpdate != Net_LibST_Update || SlotNeedUpdate || forceUpdate) {
            LibST_PrevUpdate = Net_LibST_Update;
            updateSlot(fillableSlotsFrame.Controls[filled] as CMlFrame, Score, rank);
            //updateBox(boxes[filled], Score, rank, addedPoints);
        }
        rank += 1;
        filled += 1;
    }

    forceUpdate = False;

    if(filled < slotsCount){
        for(i, filled, slotsCount - 1){
            clearSlot(fillableSlotsFrame.Controls[i] as CMlFrame);
        }
    }
***

*** SB_PendingEvents ***
***
    if(Event.Type == CMlScriptEvent::Type::MouseOver && Event.Control.HasClass("trigger") && Event.Control.Parent.DataAttributeGet("login") != ""){
        showControls(Event.Control.Parent as CMlFrame);
    }
***
--></script>