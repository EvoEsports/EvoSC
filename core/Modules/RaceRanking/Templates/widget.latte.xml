{contentType text}
{extends 'Components.widget-base'}
{php $customHidescript = true;}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink version="3">
    {block id}race-ranking{/block}
    {block size}44 0{/block}

    {block content}
    <framemodel id="row">
        <label class="text-light" pos="2 0" size="4 3" valign="center" textsize="0.5" text="00." />
        <label class="text-light" pos="6 0" size="19 3" valign="center" textsize="0.6" text="" />
        <label class="text-light" pos="36.5 0" size="10 3" valign="center" halign="right" textsize="0.5" text="000:00.000" />
        <label class="text-light" pos="36.5 0" size="10 3" valign="center" halign="right" textsize="0.5" text="000:00.000" z-index="-1" opacity="0.5" />
        <label class="text-accent" pos="42 0" size="40 3" valign="center" halign="right" textsize="0.5" text="+00" />
    </framemodel>

    <quad id="header" class="bg-accent" size="44 5" z-index="-1"/>
    <quad id="bg" class="bg-dark" pos="0 -5" size="44 200" opacity="0.8" z-index="-1"/>
    <label id="title" class="text-light" z-index="1" valign="center" pos="2 -2.5" size="44 5" textsize="0.3" text="ï„ž Race Ranking"/>

    <frame id="rows" pos="0 -7.25">
        {for $i=0; $i<config('race-ranking.ui.show', 10); $i++}
        <frameinstance modelid="row" pos="0 {$i * -3}" />
        {/for}
    </frame>
    {/block}

    {block script}
    <script><!--
    Void hide(){
        HS_Hidden = True;
        AnimMgr.Add(header, "<quad opacity='0.0' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
        AnimMgr.Add(title, "<label opacity='0.0' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
        AnimMgr.Add(bg, "<quad opacity='0.0' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
    }

    Void show(){
        HS_Hidden = False;
        AnimMgr.Add(header, "<quad opacity='1.0' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
        AnimMgr.Add(title, "<label opacity='1.0' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
        AnimMgr.Add(bg, "<quad opacity='0.8' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
    }

    Void hidescript(){
        if(HS_Target == Null){
            HS_Target <=> (Page.MainFrame.GetFirstChild("{isset($target) ? $target : 'widget'}") as CMlFrame);
        }

        declare UISettings settings for This;
        {if $is_maniaplanet}
        declare hideSpeed = settings.speed;
        {else}
        declare hideSpeed = 10;
        {/if}

        if(hideSpeed == -1 || InputPlayer == Null){
            return;
        }

        declare Boolean mapFinished = {(isset($hideOnPodium) ? "UI.UISequence == CUIConfig::EUISequence::Podium" : "False")|noescape};

        if(mapFinished){
            if(!HS_Hidden){
                hide();
            }
        }else{
            {if $is_maniaplanet}
            declare Boolean playerIsRacing = InputPlayer.RaceState == CTmMlPlayer::ERaceState::Running;
            declare Boolean overHidespeed = InputPlayer.Speed * 3.6 > hideSpeed;
            {else}
            declare Boolean overHidespeed = InputPlayer.Speed * 3.6 > 10;
            {/if}

            if(overHidespeed {if $is_maniaplanet}&& playerIsRacing {/if}&& !HS_Hidden){
                hide();
            }
            if((!overHidespeed {if $is_maniaplanet}|| !playerIsRacing{/if}) && HS_Hidden){
                show();
            }
        }
    }

    Text formatScoreCorrect(Integer scoreIn, Boolean cutZeroes){
        declare Text secondString;
        declare Text msString;
        declare Integer score;

        score = scoreIn;

        if(score < 0){
            score = -score;
        }

        declare Integer seconds = score / 1000;
        declare Integer minutes = seconds / 60;
        declare Integer ms = score - (seconds * 1000);

        seconds = seconds - (minutes * 60);

        secondString = "" ^ seconds;

        if(seconds < 10 && minutes > 0){
            secondString = "0" ^ seconds;
        }

        if(ms == 0){
            msString = "000";
        }else if(ms > 0 && ms < 10){
            msString = "00" ^ ms;
        }else if(ms >= 10 && ms < 100){
            msString = "0" ^ ms;
        }else{
            msString = "" ^ ms;
        }

        if(cutZeroes && minutes == 0){
            return secondString ^ "." ^ msString;
        }

        return minutes ^ ":" ^ secondString ^ "." ^ msString;
    }

    Integer getAddedPoints(){
        declare Integer p = 1;
        if(filled < points.count){
            p = points[filled];
        }
        return p;
    }
        --></script>
    {/block}

    <script><!--
        {block globals}
        #Struct EvoSC_RaceRankingEntry {
            Text login;
            Text name;
            Integer time;
        }

        declare Vec2 widgetBasePosition;
        declare CMlFrame HS_Target;
        declare Boolean HS_Hidden;
        declare Integer[] points;
        declare Integer filled;
        declare CMlQuad header;
        declare CMlLabel title;
        {/block}

        {block bootScript}
        declare Integer[Text] EvoSC_RoundsPointsDistribution for This;
        declare EvoSC_RaceRankingEntry[] EvoSC_RaceRankings for LocalUser;
        declare lastRaceRankingsSize = -1;
        declare rows <=> (Page.MainFrame.GetFirstChild("rows") as CMlFrame);
        header <=> (Page.MainFrame.GetFirstChild("header") as CMlQuad);
        title <=> (Page.MainFrame.GetFirstChild("title") as CMlLabel);

        declare lastCurrentServerModeName = "";

        points.fromjson("{$points}");
        sleep(10);

        wait(CurrentServerModeName != "TM_TimeAttack_Online" && CurrentServerModeName != "TimeAttack");

        left__ = {config('race-ranking.ui.position') == 'left'|ms_bool};
        slot__ = {config('race-ranking.ui.slot')};
        {/block}

        {block loop}
        if(CurrentServerModeName != lastCurrentServerModeName){
            lastCurrentServerModeName = CurrentServerModeName;
            if(CurrentServerModeName == "TM_TimeAttack_Online" || CurrentServerModeName == "TimeAttack"){
                declare Integer LastUiUpdate for This = 0;
                widgetSetHeight__(0.0);
                LastUiUpdate = GameTime;
                return;
            }else{
                widgetSetHeight__({config('race-ranking.ui.show', 10)*3+7} * 1.0);
                widget.Show();
            }
        }

        if(CurrentServerModeName == "TM_TimeAttack_Online" || CurrentServerModeName == "TimeAttack"){
            continue;
        }

        if(EvoSC_RaceRankings.count != lastRaceRankingsSize){
            lastRaceRankingsSize = EvoSC_RaceRankings.count;

            filled = 0;
            EvoSC_RoundsPointsDistribution = Integer[Text];

            foreach(raceRanking in EvoSC_RaceRankings){
                if(filled >= rows.Controls.count) break;

                declare addedPoints = getAddedPoints();
                declare row <=> (rows.Controls[filled] as CMlFrame);
                if(raceRanking.time > 0){
                    (row.Controls[0] as CMlLabel).Value = (filled + 1) ^ ".";
                    (row.Controls[1] as CMlLabel).Value = raceRanking.name;
                    (row.Controls[2] as CMlLabel).Value = formatScoreCorrect(raceRanking.time, True);
                    (row.Controls[3] as CMlLabel).Value = formatScoreCorrect(raceRanking.time, False);
                    (row.Controls[4] as CMlLabel).Value = "+" ^ addedPoints;
                    EvoSC_RoundsPointsDistribution[raceRanking.login] = addedPoints;
                }else{
                    (row.Controls[0] as CMlLabel).Value = (filled + 1) ^ ".";
                    (row.Controls[1] as CMlLabel).Value = raceRanking.name;
                    (row.Controls[2] as CMlLabel).Value = "DNF";
                    (row.Controls[3] as CMlLabel).Value = "";
                    (row.Controls[4] as CMlLabel).Value = "";
                }
                row.Show();

                filled += 1;
            }

            for(i, filled, rows.Controls.count - 1){
                (rows.Controls[i] as CMlFrame).Hide();
            }
        }

        hidescript();
        {/block}

        {block pendingEvents}
        {/block}
        --></script>
</manialink>