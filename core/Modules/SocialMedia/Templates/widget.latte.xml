{contentType text}
{extends 'Components.widget-base'}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink version="3">
    {block id}social-media{/block}
    {block size}44 0{/block}

    {block content}
    <framemodel id="link">
        <quad class="bg-dark link" size="100 100" opacity="0.8" ScriptEvents="1" />
        <quad pos="-100 0" size="8 10" bgcolor="000" opacity="0.9" z-index="5" />
        <quad pos="4 -4" size="4 4" halign="center" valign="center" image="ICON" z-index="15"/>
        <label class="text-light" pos="4 -7.5" valign="center" halign="center" textsize="0.002" text="TITLE" z-index="15"/>
        <quad z-index="10" halign="center" valign="center" keepratio="Fit" />
    </framemodel>

    <frame id="links" pos="36">
        {foreach $links as $link}
        <frameinstance modelid="link" />
        {/foreach}
    </frame>
    {/block}

    {block script}
    <script><!--
    Void setup(){
        declare Text[Text][] links;
        links.fromjson("""{$links->values()->toJson()}""");

        declare linksFrame <=> (Page.MainFrame.GetFirstChild("links") as CMlFrame);

        declare filled = 0;
        declare gutter = 0;
        declare widths = 0.0;
        declare widthsNoGutter = 0.0;
        declare heights = 0.0;
        declare filledRow = 0;

        foreach(link in links){
            declare Text[] size = TL::Split("x", link["size"]);
            declare width = TL::ToInteger(size[0]);
            declare height = TL::ToInteger(size[1]);
            declare frame <=> (linksFrame.Controls[filled] as CMlFrame);

            if(filledRow + width > COLUMNS){
                filledRow = 0;
                widthsNoGutter = 0.0;
                widths = 0.0;
            }

            if(height > 1){
                width = COLUMNS;
            }

            frame.RelativePosition_V3[0] = widths * -1.0;
            frame.RelativePosition_V3[1] = heights * -1;
            frame.Size = <COLUMN_WIDTH * width + (width - 1 * GUTTER), ROW_HEIGHT * height>;

            frame.Controls[0].DataAttributeSet("link", link["url"]);

            declare highlight = (frame.Controls[1] as CMlQuad);
            highlight.BgColor = CL::HexToRgb(link["color"]);
            highlight.Size = frame.Size;

            declare icon = (frame.Controls[2] as CMlQuad);
            icon.ImageUrl = link["icon"];
            icon.RelativePosition_V3[0] = (width * COLUMN_WIDTH) / 2 + ((width - 1) * GUTTER) / 2;
            icon.RelativePosition_V3[1] = ((height * ROW_HEIGHT) / 2 - ((height - 1) * GUTTER) / 2) * -1 + 1.0;

            declare title = (frame.Controls[3] as CMlLabel);
            title.Value = link["title"];
            title.RelativePosition_V3[0] = icon.RelativePosition_V3[0];
            title.RelativePosition_V3[1] = icon.RelativePosition_V3[1] - 3.5;

            declare bgImage = (frame.Controls[4] as CMlQuad);
            bgImage.Size = frame.Size;
            bgImage.ImageUrl = link["bg_image"];
            bgImage.RelativePosition_V3[0] = bgImage.Size[0] / 2;
            bgImage.RelativePosition_V3[1] = bgImage.Size[1] / -2;

            if(width > 1){
                frame.RelativePosition_V3[0] = frame.RelativePosition_V3[0] - (COLUMN_WIDTH * (width - 1));
                frame.RelativePosition_V3[0] = frame.RelativePosition_V3[0] - (GUTTER * (width - 1));
            }

            filledRow += width;
            widthsNoGutter += width * COLUMN_WIDTH;
            widths += width * COLUMN_WIDTH + GUTTER * width;

            if(filledRow >= COLUMNS){
                filledRow = 0;
                widthsNoGutter = 0.0;
                widths = 0.0;
                heights += height * ROW_HEIGHT + GUTTER;
            }

            filled += 1;
        }

        if(filledRow > 0){
            heights += ROW_HEIGHT + GUTTER;
        }

        widgetSetHeight__(heights - GUTTER);
    }
    --></script>
    {/block}

    <script><!--
    {block globals}
    #Include "ColorLib" as CL

    #Const COLUMNS 5
    #Const COLUMN_WIDTH 8.0
    #Const ROW_HEIGHT 10.0
    #Const GUTTER 1
    {/block}

    {block bootScript}
        declare setUp = False;

        left__ = {config('social-media.ui.position') == 'left'|ms_bool};
        slot__ = {config('social-media.ui.slot')};
    {/block}

    {block loop}
    if(!setUp){
        setUp = True;
        setup();
    }
    {/block}

    {block pendingEvents}
        if(event.Control.HasClass("link")){
            declare bg = (event.Control.Parent.Controls[1] as CMlQuad);
            declare icon = (event.Control.Parent.Controls[2] as CMlQuad);
            declare bgImage = (event.Control.Parent.Controls[4] as CMlQuad);

            if(event.Type == CMlScriptEvent::Type::MouseClick){
                OpenLink(event.Control.DataAttributeGet("link"), ::LinkType::ExternalBrowser);
                continue;
            }
            if(event.Type == CMlScriptEvent::Type::MouseOver){
                bg.RelativePosition_V3[0] = bg.Size[0] * -1.1;
                declare animDuration = ML::NearestInteger(bg.Size[0] * 10) + 200;
                AnimMgr.Add(bg, "<quad pos='0 0' />", animDuration, CAnimManager::EAnimManagerEasing::ExpOut);
                AnimMgr.Add(icon, "<quad scale='1.3' />", animDuration, CAnimManager::EAnimManagerEasing::ExpOut);
                AnimMgr.Add(bgImage, "<quad scale='1.1' />", animDuration + 50, CAnimManager::EAnimManagerEasing::ExpOut);
                continue;
            }
            if(event.Type == CMlScriptEvent::Type::MouseOut){
                declare animDuration = ML::NearestInteger(bg.Size[0] * 10) + 200;
                AnimMgr.Add(bg, "<quad pos='"^(bg.Size[0] * 1.1)^" 0' />", animDuration, CAnimManager::EAnimManagerEasing::ExpOut);
                AnimMgr.Add(icon, "<quad scale='1' />", animDuration, CAnimManager::EAnimManagerEasing::ExpOut);
                AnimMgr.Add(bgImage, "<quad scale='1' />", animDuration + 50, CAnimManager::EAnimManagerEasing::ExpOut);
                continue;
            }
        }
    {/block}
--></script>
</manialink>
