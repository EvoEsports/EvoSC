{contentType text}
{extends 'Components.widget-base'}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink version="3">
    {block id}liverankings{/block}
    {block size}44 {config('live-rankings.show',14) * 3 + 6}{/block}

    {block content}
    <quad id="header" class="bg-accent" size="44 5" z-index="-1"/>
    <quad id="bg" class="bg-dark" pos="0 -5" size="44 200" opacity="0.8" z-index="-1"/>
    <label class="text-light" z-index="1" valign="center" pos="1.5 -2.5" size="44 5" textsize="0.3" text="ÔÉÄ Live Ranking"/>
    <label id="points-limit" class="text-light" z-index="1" valign="center" halign="right" pos="42.5 -2.5" size="44 5" textsize="0.3" text=""/>

    <framemodel id="record">
        <label class="text-light" z-index="2" valign="center" halign="right" pos="3 0" size="3 2" textsize="0.4" text="0."/>
        <label class="text-lighter" z-index="1" valign="center" halign="right" pos="13 0" size="12 2" textsize="0.4" text="0:00.000" opacity="0.25"/>
        <label class="text-light" z-index="2" valign="center" halign="right" pos="13 0" size="12 2" textsize="0.4" text="0:00.000"/>
        <label class="text-light" z-index="2" valign="center" pos="14 0" size="23 2" textsize="0.4" text="name"/>
        <label class="text-accent" z-index="2" valign="center" pos="41 0" size="23 2" halign="right" textsize="0.4" text="+00"/>
        <label pos="13.9 0" text="ÔÉà" textsize="1.1" valign="center" />
    </framemodel>

    <frame id="ranking" pos="1 -7">
        {for $i=0; $i < config('live-rankings.show',14); $i++}
        <frameinstance modelid="record" pos="0 {$i * -3}" hidden="0"/>
        {/for}
    </frame>
    {/block}

    {block script}
    <script><!--
    Text formatScoreCorrect(Integer scoreIn, Boolean cutZeroes){
        declare Text secondString;
        declare Text msString;
        declare Integer score;

        score = scoreIn;

        if(score < 0){
            score = -score;
        }

        declare Integer seconds = score / 1000;
        declare Integer minutes = seconds / 60;
        declare Integer ms = score - (seconds * 1000);

        seconds = seconds - (minutes * 60);

        secondString = "" ^ seconds;

        if(seconds < 10 && minutes > 0){
            secondString = "0" ^ seconds;
        }

        if(ms == 0){
            msString = "000";
        }else if(ms > 0 && ms < 10){
            msString = "00" ^ ms;
        }else if(ms >= 10 && ms < 100){
            msString = "0" ^ ms;
        }else{
            msString = "" ^ ms;
        }

        if(cutZeroes && minutes == 0){
            return secondString ^ "." ^ msString;
        }

        return minutes ^ ":" ^ secondString ^ "." ^ msString;
    }

    Boolean isTimeAttack(){
        return CurrentServerModeName == "TimeAttack" || CurrentServerModeName == "TM_TimeAttack_Online";
    }

    Void updateSlot(CMlFrame box, Integer rank, EvoSC_MatchTrackerEntry entry){
        declare prefix = "";

        if(entry.spectator){
            prefix = "$dddÔÅÆ";
        }else if(!entry.online){
            prefix = "$dddÔàµ";
        }

        if(isTimeAttack()){
            (box.Controls[1] as CMlLabel).Value = formatScoreCorrect(entry.score, False);
            (box.Controls[2] as CMlLabel).Value = formatScoreCorrect(entry.score, True);
            (box.Controls[4] as CMlLabel).Hide();
            (box.Controls[5] as CMlLabel).Hide();
            if(prefix != ""){
                prefix = prefix ^ "  ";
            }
        }else if(CurrentServerModeName == "TM_RoyalTimeAttack_Online"){
            (box.Controls[1] as CMlLabel).Value = TL::FormatInteger(entry.section, 3) ^ " ÔÑû";
            (box.Controls[2] as CMlLabel).Value = entry.section ^ " ÔÑû";
            (box.Controls[4] as CMlLabel).Hide();
            (box.Controls[5] as CMlLabel).Hide();
        }else{
            if(entry.gained > 0){
                (box.Controls[4] as CMlLabel).Value = "+" ^ entry.gained;
                (box.Controls[4] as CMlLabel).Show();
            }else{
                (box.Controls[4] as CMlLabel).Hide();
            }

            if(isInLapsMode){
                if(entry.laps == maxLaps){
                    (box.Controls[1] as CMlLabel).Value = "üèÅ üèÅ üèÅ";
                    (box.Controls[2] as CMlLabel).Value = "üèÅ";
                }else{
                    (box.Controls[1] as CMlLabel).Value = TL::FormatInteger(entry.laps, 3) ^ " Lap";
                    (box.Controls[2] as CMlLabel).Value = entry.laps ^ " Lap";
                }
                box.Controls[5].Hide();
            }else{
                (box.Controls[1] as CMlLabel).Value = TL::FormatInteger(entry.points, 3) ^ " PTS";
                (box.Controls[2] as CMlLabel).Value = entry.points ^ " PTS";
                if(UseClans){
                    (box.Controls[5] as CMlLabel).Show();
                    if(entry.team == -1){
                        (box.Controls[5] as CMlLabel).TextColor = <0.5,0.5,0.5>;
                    }else{
                        (box.Controls[5] as CMlLabel).TextColor = Teams[entry.team].ColorPrimary;
                    }
                    if(prefix == ""){
                        prefix = "      " ^ prefix;
                    }else{
                        prefix = prefix ^ "  ";
                    }
                }else{
                    box.Controls[5].Hide();
                }
            }
        }

        (box.Controls[0] as CMlLabel).Value = rank ^ ".";
        (box.Controls[3] as CMlLabel).Value = prefix ^ entry.name;
        box.Show();
    }

    Void updateWidget(EvoSC_MatchTrackerEntry[] ranking){
        declare Integer[Text] EvoSC_RoundsPointsDistribution for This;
        declare pointsLimitLabel = (Page.MainFrame.GetFirstChild("points-limit") as CMlLabel);
        declare rankingFrame <=> (Page.MainFrame.GetFirstChild("ranking") as CMlFrame);
        declare filled = 0;

        pointsLimitLabel.Visible = (!isTimeAttack() || isInLapsMode);
        if(isInLapsMode){
            pointsLimitLabel.Value = Map.MapInfo.TMObjective_NbLaps ^ " Laps";
        }

        foreach(entry in ranking){
            if(filled >= rankingFrame.Controls.count) break;
            updateSlot((rankingFrame.Controls[filled] as CMlFrame), filled+1, entry);
            filled += 1;
        }

        for(i, filled, rankingFrame.Controls.count - 1){
            (rankingFrame.Controls[i] as CMlFrame).Hide();
        }
    }
    --></script>
    {/block}

    <script><!--
    {block globals}
    #Include "ColorLib" as CL

    #Struct EvoSC_MatchTrackerEntry {
        Text name;
        Text login;
        Integer points;
        Integer gained;
        Integer score;
        Integer team;
        Integer laps;
        Integer section;
        Text checkpoints;
        Boolean online;
        Boolean spectator;
    }

    declare Integer max;
    declare Integer maxLaps;
    declare Boolean isInLapsMode;
    {/block}

    {block bootScript}
        declare pointsLimitLabel = (Page.MainFrame.GetFirstChild("points-limit") as CMlLabel);
        declare Integer EvoSC_PointsLimit for This;
        declare Integer EvoSC_LastPointsLimitUpdate for This = 0;
        declare EvoSC_MatchTrackerEntry[] EvoSC_LiveRankings for This;
        declare Integer EvoSC_LiveRankings_LastUpdate for This;
        declare lastUpdate = 0;
        declare lastPointLimitUpdate = 0;
        declare CMap lastMap <=> Map;

        isInLapsMode = {if isManiaplanet()}CurrentServerModeName == "Laps"{else}CurrentServerModeName == "TM_Laps_Online"{/if};
        max = {config('live-rankings.show', 14)};

        left__ = {config('live-rankings.ui.position') == 'left'|ms_bool};
        slot__ = {config('live-rankings.ui.slot')};

        if(isInLapsMode){
            maxLaps = Map.MapInfo.TMObjective_NbLaps;
        }else{
            maxLaps = -1;
        }

        widgetSetHeight__(5.0 + (max * 3));
    {/block}

    {block loop}
    if(lastUpdate != EvoSC_LiveRankings_LastUpdate){
        lastUpdate = EvoSC_LiveRankings_LastUpdate;
        updateWidget(EvoSC_LiveRankings);
    }

    if(lastMap != Map){
        isInLapsMode = {if isManiaplanet()}CurrentServerModeName == "Laps"{else}CurrentServerModeName == "TM_Laps_Online"{/if};
        maxLaps = Map.MapInfo.TMObjective_NbLaps;
    }

    if(lastPointLimitUpdate != EvoSC_LastPointsLimitUpdate){
        lastPointLimitUpdate = EvoSC_LastPointsLimitUpdate;
        declare Integer originalPointsLimit = {$originalPointsLimit ?? 30};
        declare Integer EvoSC_PointsLimit for This = -1;

        if(EvoSC_PointsLimit > 0){
            declare pointsLimitText = "Points-Limit: " ^ EvoSC_PointsLimit;
            if(EvoSC_PointsLimit > originalPointsLimit){
                pointsLimitText = pointsLimitText ^ " (+" ^ (EvoSC_PointsLimit - originalPointsLimit) ^ ")";
            }
            pointsLimitLabel.Value = pointsLimitText;
        }else{
            if(!isInLapsMode){
                pointsLimitLabel.Value = "";
            }
        }
    }
    {/block}

    {block pendingEvents}
    {/block}
--></script>
</manialink>