{contentType text}
{extends 'Components.widget-base'}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink version="3">
    {block id}music-client{/block}
    {block size}44 8{/block}

    {block content}
        <quad id="bg" class="bg-dark" size="36 8" opacity="0.8" z-index="-1"/>
        <quad id="header" class="bg-accent" pos="36 0" size="8 8" z-index="-1"/>

        <label pos="40 -3.5" valign="center" halign="center" textsize="2.3" size="6 6" text="♫" textcolor="{config('colors.ui.widget.text.primary')}" textfont="{config('colors.ui.font')|noescape}"/>

        <frame id="main-frame" z-index="1" pos="0 -0" size="50 10">
            <frame id="content" pos="34.5 -1.75" scale="0.8" hidden="0">
                <label id="title" class="text-lighter" z-index="1" size="41 3" halign="right" textsize="1.3" text="No music playing"/>
                <label id="artist" class="text-light" pos="0 -4" z-index="1" size="41 3" halign="right" textsize="0.4" text="Select a song in the music-list"/>
            </frame>

            <frame id="widget-controls" pos="0 1" z-index="10">
                <quad class="music-control bg-dark" pos="-5 0" size="36 8" opacity="0.75" z-index="-1"/>

                <frame pos="1 -4">
                    <label class="skip btn-muted" textsize="1.5" size="12 8.2" ScriptEvents="1"/>
                    <label class="text-light" pos="0 1" textsize="1" size="8 8" text="" z-index="1" halign="center" valign="center"/>
                    <label class="text-light" pos="0 -2" textsize="1" scale="0.6" size="8 8" text="Skip" z-index="1" halign="center" valign="center"/>
                </frame>
                <frame pos="19 -4">
                    <label class="music-list btn-muted" textsize="1.5" size="24 8.2" ScriptEvents="1"/>
                    <label pos="0 1" textsize="1" size="8 8" text="" z-index="1" halign="center" valign="center"/>
                    <label pos="0 -2" textsize="1" scale="0.6" size="8 8" text="Music" z-index="1" halign="center" valign="center"/>
                </frame>
            </frame>
        </frame>

        <frame id="loading-frame" pos="1 -2.75" scale="0.85">
            <frame id="spinner-frame" pos="15 -1.75" halign="center" valign="center" scale="0.9">
                <label class="text-warning" pos="0.02 0.25" z-index="1" size="4 4" text="" halign="center" valign="center"/>
            </frame>
            <label class="text-warning" pos="17.25 -1.4" z-index="1" size="24 4" text="Loading" valign="center"/>
        </frame>
    {/block}

    {block script}
    <script><!--
declare Text baseUrl;
declare Boolean loading;
declare Vec3 hoverColor;
declare Ident currentMap;
declare Boolean controlsVisible;

Void startLoading(){
    (Page.MainFrame.GetFirstChild("content") as CMlFrame).Hide();
    declare spinner <=> (Page.MainFrame.GetFirstChild("spinner-frame") as CMlFrame);
    AnimMgr.Add(spinner, "<frame rot='359640' />", 999*1900, CAnimManager::EAnimManagerEasing::Linear);
    (Page.MainFrame.GetFirstChild("loading-frame") as CMlFrame).Show();
    loading = True;
}

Void stopLoading(){
    (Page.MainFrame.GetFirstChild("content") as CMlFrame).Show();
    declare spinner <=> (Page.MainFrame.GetFirstChild("spinner-frame") as CMlFrame);
    AnimMgr.Flush(spinner);
    (Page.MainFrame.GetFirstChild("loading-frame") as CMlFrame).Hide();
    loading = False;
}

Void stopAllSounds(){
    declare CAudioSource[] toDestroy = CAudioSource[];

    foreach(sound in Audio.Sounds){
        if(sound.IsPlaying && !sound.DownloadInProgress){
            toDestroy.add(sound);
        }
    }

    foreach(sound in toDestroy){
        Audio.DestroySound(sound);
    }
}

Void updateWidget(Song song){
    (Page.MainFrame.GetFirstChild("title") as CMlLabel).SetText(song.title);

    declare artist = song.artist;

    if(song.album != "n/a"){
        artist = song.album ^ " - " ^ artist;
    }

    (Page.MainFrame.GetFirstChild("artist") as CMlLabel).SetText(artist);
}

Void playSong(Song song){
    declare CMlFrame widgetControls <=> (Page.MainFrame.GetFirstChild("widget-controls") as CMlFrame);
    declare MusicLibrary musicLib for This;
    declare Song ESC_MC_PLAY for This;
    declare url = musicLib.server ^ "?song=" ^ TL::URLEncode(song.file);

    controlsVisible = False;
    AnimMgr.Add(widgetControls, " <frame pos='5.0 -8.5' /> ", 150, CAnimManager::EAnimManagerEasing::QuadOut);
    startLoading();

    declare audio = Audio.CreateSound(url, 1.0, True, True, False);
    declare startTime = GameTime;

    while(audio.DownloadInProgress){
        yield;
        hidescript();

        if(GameTime > (startTime + 3500)){
            if(GameTime > (startTime + 15000)){
                stopLoading();
                return;
            }
        }
    }

    stopAllSounds();
    audio.Play();
    updateWidget(song);
    stopLoading();
}

Void playRandomSong(){
    declare MusicLibrary musicLib for This;
    playSong(musicLib.songs[ML::Rand(0, musicLib.songs.count - 1)]);
}
--></script>
    {/block}

    <script><!--
    {block globals}
        #Struct Song {
            Text title;
            Text artist;
            Text album;
            Text file;
            Text length;
        }

        #Struct MusicLibrary {
            Song[] songs;
            Text server;
        }
    {/block}

    {block bootScript}
        declare MusicLibrary musicLib for This;
        declare Song StartSong for This;
        declare Song ESC_MC_PLAY for This;
        declare Song lastStartedSong;
        declare Text EvoSC_MusicSearch for This = "";
        declare Integer EvoSC_LastMusicSearch for This = 0;

        startLoading();

        hoverColor = TL::ToColor("{config('colors.ui.window.header.color')}");

        declare CMlFrame mainFrame <=> (Page.MainFrame.GetFirstChild("main-frame") as CMlFrame);
        declare CMlFrame widget <=> (Page.MainFrame.GetFirstChild("widget") as CMlFrame);
        declare CMlFrame widgetControls <=> (Page.MainFrame.GetFirstChild("widget-controls") as CMlFrame);

        AnimMgr.Add(widgetControls, " <frame pos='5.0 -8.5' /> ", 1, CAnimManager::EAnimManagerEasing::QuadOut);

        controlsVisible = False;
        declare musicPlaying = True;

        left__ = {config('music.ui.position') == 'left'|ms_bool};
        slot__ = {config('music.ui.slot')};

        AnimMgr.Add(widgetControls, " <frame pos='5.0 -8.5' /> ", 150, CAnimManager::EAnimManagerEasing::QuadOut);
    {/block}

    {block loop}
        if(Map.Id != currentMap && StartSong.title != ""){
            updateWidget(StartSong);
            stopAllSounds();
            currentMap = Map.Id;
            continue;
        }

        if(ESC_MC_PLAY != lastStartedSong){
            lastStartedSong = ESC_MC_PLAY;
            playSong(ESC_MC_PLAY);
            continue;
        }

        if(loading && musicLib.songs.count > 0){
            stopLoading();
        }

        declare x_min = widget.RelativePosition_V3[0];
        declare x_max = widget.RelativePosition_V3[0] + (mainFrame.Size[0] * widget.RelativeScale);
        declare y_min = widget.RelativePosition_V3[1];
        declare y_max = widget.RelativePosition_V3[1] - (mainFrame.Size[1] * widget.RelativeScale);
        declare Boolean xInBounds = (MouseX > x_min && MouseX < x_max);
        declare Boolean yInBounds = (MouseY < y_min && MouseY > y_max);

        if(!(xInBounds && yInBounds) && controlsVisible){
            controlsVisible = False;
            AnimMgr.Add(widgetControls, " <frame pos='5.0 -8.5' /> ", 150, CAnimManager::EAnimManagerEasing::QuadOut);
        }
        if((xInBounds && yInBounds) && !controlsVisible){
            controlsVisible = True;
            AnimMgr.Add(widgetControls, " <frame pos='5.0 0.1' /> ", 150, CAnimManager::EAnimManagerEasing::QuadOut);
        }
    {/block}

    {block pendingEvents}
        if(event.Control.HasClass("skip") && event.Type == CMlScriptEvent::Type::MouseClick){
            playRandomSong();
            continue;
        }

        if(event.Control.HasClass("music-list") && event.Type == CMlScriptEvent::Type::MouseClick){
            EvoSC_MusicSearch = "";
            EvoSC_LastMusicSearch = GameTime;
            continue;
        }
    {/block}
    --></script>
</manialink>