{contentType text}
{extends 'components.window'}
{php $window_width = 130;}
{php $window_height = 89;}
{php $doNotExit = true;}
{php $startHidden = true;}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink version="3">
    {block id}music-list{/block}
    {block icon}♫{/block}
    {block title}Music Library{/block}

    {block content}
    <framemodel id="row">
        <label class="text-light" valign="center" pos="0 0" size="39 3" textsize="0.7" text="Title"  />
        <label class="text-light" valign="center" pos="40 0" size="39 3" textsize="0.7" text="Artist"  />
        <label class="text-light" valign="center" pos="80 0" size="34 3" textsize="0.7" text="Album"  />
        <label class="text-light" valign="center" pos="126 0" size="20 3" textsize="0.7" text="Length" halign="right"  />
        <label class="btn-accent play" pos="63" size="130 4" ScriptEvents="1" focusareacolor1="0000" />
    </framemodel>

    <label class="text-light" valign="center" pos="0 -78" size="120 10" textsize="0.6" textprefix="$s" text=" Due to ManiaPlanets caching-system, changing music can sometimes be difficult. A song only starts playing when it was successfully loaded into cache and that only happens when you either reset your car or open the game menu.
After switching songs a blue bar will appear in the top right corner or the screen (if the song is not in cache).
After it dissapears you can reset and the song will start to play." autonewline="1" />

    <frame pos="0 -1">
        <label class="text-accent" pos="0 0" size="39 4" textsize="0.9" text="Title"/>
        <label class="text-accent" pos="40 0" size="39 4" textsize="0.9" text="Arist"/>
        <label class="text-accent" pos="80 0" size="34 4" textsize="0.9" text="Album"/>
        <label class="text-accent" pos="126 0" size="20 4" textsize="0.9" text="Length" halign="right"/>

        <!--suppress CheckTagEmptyBody -->
        <frame id="rows" pos="0 -5">
            {for $i=0; $i<15; $i++}
            <frameinstance modelid="row" pos="0 {$i * -4}"></frameinstance>
            {/for}
        </frame>

        <frame pos="2 -66.5" scale="0.9">
            {include 'components.pagination'}
        </frame>

        <frame id="search-frame" pos="100 -66.5" scale="0.9">
            <label pos="30 0" halign="right" valign="center" textsize="0.9" text="🔍" textcolor="{config('theme.hud.text-light')}"/>
            <entry id="search-input" class="form search-input" pos="26.5 0" size="25 3.5" halign="right" valign="center" textsize="1.2"/>
            <label id="clear-search" class="btn-danger clear-search" size="3.5 3.5" textsize="0.25" text="" ScriptEvents="1" hidden="1"/>
        </frame>
    </frame>
    {/block}

    <script><!--
    {block globals}
    #Struct Song {
        Text title;
        Text artist;
        Text album;
        Text file;
        Text length;
    }

    #Struct MusicLibrary {
        Song[] songs;
        Text server;
    }

    declare Integer perPage;
    declare Integer maxPage;
    declare Integer currentPage;
    declare Song[] currentSelection;
    {/block}

    {block functions}
    Void updateMaxPage(){
        declare pageLabel <=> (Page.MainFrame.GetFirstChild("page-info") as CMlLabel);
        maxPage = ML::CeilingInteger(currentSelection.count / perPage * 1.0);
        pageLabel.Value = (currentPage + 1) ^ "/" ^ maxPage;
    }

    Void fillList(){
        updateMaxPage();
        declare skipped = 0;
        declare toSkip = currentPage * perPage;
        declare i = 0;
        declare rows <=> (Page.MainFrame.GetFirstChild("rows") as CMlFrame);

        foreach(song in currentSelection){
            if(skipped < toSkip){
                skipped += 1;
                continue;
            }

            declare row = (rows.Controls[i] as CMlFrame);
            (row.Controls[0] as CMlLabel).Value = song.title;
            (row.Controls[1] as CMlLabel).Value = song.artist;
            (row.Controls[2] as CMlLabel).Value = song.album;
            (row.Controls[3] as CMlLabel).Value = song.length;
            row.Show();
            row.DataAttributeSet("song", song.tojson());

            i += 1;
            if(i >= perPage){
                break;
            }
        }

        if(i < perPage - 1){
            for(x, i, perPage - 1){
                (rows.Controls[x] as CMlFrame).Hide();
            }
        }
    }

    Void search(Text part){
        declare MusicLibrary musicLib for This;
        declare Song[] tempLib;
        currentPage = 0;

        foreach(song in musicLib.songs){
            declare searchString = song.title ^ " " ^ song.artist ^ " " ^ song.album;
            if(TL::Find(part, searchString, False, False)){
                tempLib.add(song);
            }
        }

        currentSelection = tempLib;
        fillList();
    }
    {/block}

    {block bootScript}
    declare MusicLibrary musicLib for This;
    declare Song ESC_MC_PLAY for This;
    declare resetSearch <=> (Page.MainFrame.GetFirstChild("clear-search") as CMlLabel);
    declare Text SearchSong for This = "";

    wait(musicLib.songs.count > 0);

    perPage = 15;
    currentPage = 0;
    currentSelection = musicLib.songs;
    fillList();
    {/block}

    {block loop}
    if(TL::Length(SearchSong) > 0){
        declare search = TL::Trim(SearchSong);
        if(search == ""){
            currentSelection = musicLib.songs;
            fillList();
            (Page.MainFrame.GetFirstChild("search-input") as CMlEntry).Value = "";
            resetSearch.Hide();
        }else{
            search(TL::Trim(SearchSong));
            (Page.MainFrame.GetFirstChild("search-input") as CMlEntry).Value = TL::Trim(SearchSong);
            resetSearch.Show();
        }
        SearchSong = "";
        window.Show();
    }
    {/block}

    {block pendingEvents}
    if(event.Control.HasClass("previous-page") && event.Type == CMlScriptEvent::Type::MouseClick){
        currentPage -= 1;
        if(currentPage < 0){
            currentPage = maxPage - 1;
        }
        fillList();
    }
    if(event.Control.HasClass("next-page") && event.Type == CMlScriptEvent::Type::MouseClick){
        currentPage += 1;
        if(currentPage >= maxPage){
            currentPage = 0;
        }
        fillList();
    }
    if(event.Control.HasClass("enable-page-input") && event.Type == CMlScriptEvent::Type::MouseClick){
        event.Control.Hide();
        declare pageInput <=> (Page.MainFrame.GetFirstChild("page-input") as CMlEntry);
        pageInput.Value = "";
        pageInput.Show();
        pageInput.StartEdition();
    }
    if(event.Control.HasClass("clear-search") && event.Type == CMlScriptEvent::Type::MouseClick){
        (Page.MainFrame.GetFirstChild("search-input") as CMlEntry).SetText("", True);
    }
    if(event.Control.HasClass("play") && event.Type == CMlScriptEvent::Type::MouseClick){
        declare data = event.Control.Parent.DataAttributeGet("song");
        declare Song song;
        song.fromjson(data);
        ESC_MC_PLAY = song;
    }
    if(event.Control.HasClass("page-input") && event.Type == CMlScriptEvent::Type::EntrySubmit){
        declare pageInput = (event.Control as CMlEntry);
        currentPage = TL::ToInteger(pageInput.Value) - 1;
        if(currentPage >= maxPage){
            currentPage = maxPage - 1;
        }
        if(currentPage < 0){
            currentPage = 0;
        }
        pageInput.Hide();
        (Page.MainFrame.GetFirstChild("page-info") as CMlLabel).Show();
        fillList();
    }
    if(event.Control.HasClass("search-input") && event.Type == CMlScriptEvent::Type::EntrySubmit){
        declare searchInput = (event.Control as CMlEntry);
        if(TL::Trim(searchInput.Value) == ""){
            currentSelection = musicLib.songs;
            fillList();
            resetSearch.Hide();
        }else{
            search(TL::Trim(searchInput.Value));
            resetSearch.Show();
        }
    }
    {/block}
    --></script>
</manialink>