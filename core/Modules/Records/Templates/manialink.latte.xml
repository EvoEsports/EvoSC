{contentType text}
{extends 'Components.widget-base'}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink version="3">
    {block id}world-records{/block}
    {block size}44 30.5{/block}

    {block content}
    <framemodel id="record">
        <label class="text-light" z-index="1" valign="center" halign="right" pos="3.5 0" size="4 2" textprefix="$s" textsize="0.4" text="78."/>
        <label class="text-light" z-index="0" valign="center" halign="right" pos="16 0" size="12 2" textsize="0.6" text="" opacity="0.25"/>
        <label class="text-light" z-index="1" valign="center" halign="right" pos="16 0" size="12 2" textsize="0.6" text=""/>
        <label class="text-light" z-index="1" valign="center" halign="left" pos="17 0" size="25 2" textsize="0.4" textprefix="$s" text=""/>
        <label hidden="1" class="btn-muted ghost" z-index="1" valign="center" halign="center" pos="40 0" size="3 3" textsize="0.4" text="🎮" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="0000" opacity="0.15" />
        <quad class="bg-accent" pos="-1 -0.2" size="45 3" opacity="0.3" z-index="-1" hidden="1" valign="center" />
    </framemodel>

    <quad class="bg-dark widget" size="45 30.5" opacity="0.8" ScriptEvents="1"/>
    <quad class="bg-darker" pos="0 -5" size="45 15.7" opacity="0.4" />
    <quad class="bg-accent" size="45 5" z-index="1" opacity="0.8"/>
    <label class="text-light" z-index="2" valign="center" pos="1.5 -2.5" textsize="0.4" text="🏆 Records"/>

    <frame id="pagination" pos="11 -2.5" scale="0.95" z-index="10">
        <label class="text-light previous" id="prev-zone" pos="29 0" size="3 3" valign="center" halign="center" text="" z-index="5555" textsize="0.5" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="0000" opacity="0.5" />
        <label id="page-label" class="text-light" pos="29 0.05" valign="center" halign="right" text="World" z-index="-1" textsize="0.75" />
        <label class="text-light next" id="next-zone" pos="31.5 0" size="3 3" valign="center" halign="center" text="" z-index="5" textsize="0.5" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="0000" />
    </frame>

    <frame id="records" pos="1 -7" z-index="5">
        {for $i=0; $i<8; $i++}
        <frameinstance modelid="record" pos="0 {$i * -3}" hidden="0"/>
        {/for}
    </frame>

    <frame id="loading-frame" pos="0 -15" scale="1" z-index="100">
        <frame id="spinner-frame" pos="15 -1.75" halign="center" valign="center" scale="0.9">
            <label class="text-accent" pos="0.02 0.25" z-index="1" size="4 4" text="" halign="center" valign="center"/>
        </frame>
        <label class="text-accent" pos="17.25 -1.4" z-index="1" size="24 4" text="Loading" valign="center"/>
    </frame>
    {/block}

    {block script}
    <script><!--
CUILayer::EUILayerType GetLayerType() {
	return Record::C_LayerType;
}

Void startLoading(){
    declare spinner <=> (Page.MainFrame.GetFirstChild("spinner-frame") as CMlFrame);
    AnimMgr.Add(spinner, "<frame rot='359640' />", 999*1900, CAnimManager::EAnimManagerEasing::Linear);
    (Page.MainFrame.GetFirstChild("loading-frame") as CMlFrame).Show();
}

Void stopLoading(){
    declare spinner <=> (Page.MainFrame.GetFirstChild("spinner-frame") as CMlFrame);
    AnimMgr.Flush(spinner);
    (Page.MainFrame.GetFirstChild("loading-frame") as CMlFrame).Hide();
}

    Text formatScoreCorrect(Integer scoreIn, Boolean cutZeroes){
        declare Text secondString;
        declare Text msString;
        declare Integer score;

        score = scoreIn;

        if(score < 0){
            score = -score;
        }

        declare Integer seconds = score / 1000;
        declare Integer minutes = seconds / 60;
        declare Integer ms = score - (seconds * 1000);

        seconds = seconds - (minutes * 60);

        secondString = "" ^ seconds;

        if(seconds < 10 && minutes > 0){
            secondString = "0" ^ seconds;
        }

        if(ms == 0){
            msString = "000";
        }else if(ms > 0 && ms < 10){
            msString = "00" ^ ms;
        }else if(ms >= 10 && ms < 100){
            msString = "0" ^ ms;
        }else{
            msString = "" ^ ms;
        }

        if(cutZeroes && minutes == 0){
            return secondString ^ "." ^ msString;
        }

        return minutes ^ ":" ^ secondString ^ "." ^ msString;
    }

    Void updateRow(CMlFrame row, Record::K_TMxSM_Record_Record record, Boolean isOnline){
        declare Text[Text] EvoSC_CustomNamesByUbiname for LocalUser;
        declare K_State Race_Record_State for UI;
        (row.Controls[0] as CMlLabel).Value = record.Rank ^ ".";
        (row.Controls[1] as CMlLabel).Value = formatScoreCorrect(record.Time, False);
        (row.Controls[2] as CMlLabel).Value = formatScoreCorrect(record.Time, True);

        declare name = record.DisplayName;
        if(EvoSC_CustomNamesByUbiname.existskey(name)){
            name = EvoSC_CustomNamesByUbiname[name];
        }

        (row.Controls[3] as CMlLabel).Value = name;
        if(Race_Record_State.LoadedRecordGhosts.existskey(record.AccountId)){
            (row.Controls[4] as CMlLabel).Opacity = 1.0;
        }else{
            (row.Controls[4] as CMlLabel).Opacity = 0.25;
        }
        (row.Controls[4] as CMlLabel).DataAttributeSet("account-id", record.AccountId);
        row.Controls[5].Visible = isOnline;
    }

    Void setRows(Record::K_TMxSM_Record_Records records){
        declare recordsFrame <=> (Page.MainFrame.GetFirstChild("records") as CMlFrame);
        declare Text[] onlinePlayers;
        foreach(player in Players){
            onlinePlayers.add(player.User.Name);
        }

        declare i = 0;
        foreach(record in records.Records){
            updateRow((recordsFrame.Controls[i] as CMlFrame), record, onlinePlayers.exists(record.DisplayName));
            recordsFrame.Controls[i].Show();
            i += 1;
        }

        for(x, i, 7){
            recordsFrame.Controls[x].Hide();
        }
    }

    Void updateSelectedZone(){
        declare Text zoneName = availableZones[selectedZone];
        declare pageLabel <=> (Page.MainFrame.GetFirstChild("page-label") as CMlLabel);
        declare prevZoneLabel <=> (Page.MainFrame.GetFirstChild("prev-zone") as CMlLabel);
        pageLabel.Value = zoneName;
        declare width = pageLabel.ComputeWidth(zoneName);
        prevZoneLabel.RelativePosition_V3[0] = pageLabel.RelativePosition_V3[0] - width - 2.5;
    }

    Void changeZone(Text zoneTarget){
        declare i = 0;
        foreach(batch in records){
            if(batch.ZoneName == zoneTarget){
                selectedZone = i;
                setRows(batch);
            }
            i += 1;
        }
        updateSelectedZone();
    }

    Void update(Record::K_TMxSM_Record_Records[] zoneRecords){
        stopLoading();
        records = zoneRecords;
        if(zoneRecords.count == 0){
            startLoading();
            return;
        }

        declare Text[] zones;
        foreach(records in zoneRecords){
            zones.add(records.ZoneName);
        }
        availableZones = zones;
        changeZone("World");
    }

K_Scope GetScope(K_State _State) {
	declare K_Scope Scope = K_Scope {
		Type = _State.ScopeNotSeason,
		Id = ""
	};
	if (_State.SeasonIds.existskey(_State.CurrentMapUid)) {
		Scope.Type = _State.ScopeSeason;
		Scope.Id = _State.SeasonIds[_State.CurrentMapUid];
	}
	return Scope;
}

K_State ReleaseRecordGhost(K_State _State, Text _AccountId) {
	declare K_State State = _State;

	declare K_RecordGhost[] Records;
	if (State.LoadingRecordGhosts.existskey(_AccountId)) Records.add(State.LoadingRecordGhosts[_AccountId]);
	if (State.LoadedRecordGhosts.existskey(_AccountId)) Records.add(State.LoadedRecordGhosts[_AccountId]);

	foreach (Record in Records) {
		if (Record.TaskIdRetrieveRecords != NullId && ScoreMgr.TaskResults.existskey(Record.TaskIdRetrieveRecords)) {
			ScoreMgr.TaskResult_Release(Record.TaskIdRetrieveRecords);
		}
		if (Record.TaskIdRetrieveGhost != NullId && DataFileMgr.TaskResults.existskey(Record.TaskIdRetrieveGhost)) {
			DataFileMgr.TaskResult_Release(Record.TaskIdRetrieveGhost);
		}
		if (Record.GhostInstanceId != NullId) {
			//GhostMgr.Ghost_Remove(Record.GhostInstanceId);
		}
		if (Record.GhostId != NullId && DataFileMgr.Ghosts.existskey(Record.GhostId)) {
			DataFileMgr.Ghost_Release(Record.GhostId);
		}
	}

	State.LoadingRecordGhosts.removekey(_AccountId);
	State.LoadedRecordGhosts.removekey(_AccountId);

	return State;
}
Void SendRecordsStatusToML(K_State _State) {
	declare Integer[Text] Race_Record_RecordsStatus for ClientUI;
	declare Integer Race_Record_RecordsStatusUpdate for ClientUI;

	Race_Record_RecordsStatus = [];

	foreach (AccountId => Record in _State.LoadingRecordGhosts) {
		Race_Record_RecordsStatus[AccountId] = C_RecordStatus_Loading;
	}
	foreach (AccountId => Record in _State.LoadedRecordGhosts) {
		Race_Record_RecordsStatus[AccountId] = C_RecordStatus_Loaded;
	}

	Race_Record_RecordsStatusUpdate += 1;
}
K_State RetrieveRecordGhost(K_State _State, Text _AccountId) {
	declare K_State State = _State;

	// Release previous record if any
	State = ReleaseRecordGhost(State, _AccountId);

/*
	declare K_RecordGhost Record = K_RecordGhost {
		AccountId = _AccountId
	};
	State.LoadingRecordGhosts[AccountId] = Record;
    declare MapRecord <=> Result.MapRecordList[0];
    declare Task = DataFileMgr.Ghost_Download(MapRecord.FileName, MapRecord.ReplayUrl);
    if (Task != Null) {
        State.LoadingRecordGhosts[AccountId].TaskIdRetrieveGhost = Task.Id;
    }
*/

	return State;
}
K_State ReleaseAllRecordGhosts(K_State _State) {
	declare K_State State = _State;

	declare TmpLoadingRecordGhosts = State.LoadingRecordGhosts;
	foreach (AccountId => Record in TmpLoadingRecordGhosts) {
		State = ReleaseRecordGhost(State, AccountId);
	}
	State.LoadingRecordGhosts = [];

	declare TmpLoadedRecordGhosts = State.LoadedRecordGhosts;
	foreach (AccountId => Record in TmpLoadedRecordGhosts) {
		State = ReleaseRecordGhost(State, AccountId);
	}
	State.LoadedRecordGhosts = [];
	SendRecordsStatusToML(State);

	return State;
}
    Boolean hasClubAccess(){
        return True;
    }

    Void modeChanged(Text mode){
        if(mode == "TM_TimeAttack_Online"){
            widgetSetHeight__(30.5);
            widget.Show();
        }else{
            widgetSetHeight__(0.0);
            widget.Hide();
        }
    }
    --></script>
    {/block}

    <script><!--
    {block globals}
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/ModeLibs/TrackMania/MV_Utils.Script.txt" as MV_Utils
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/MedalStack.Script.txt" as MedalStack
#Include "Libs/Nadeo/MenuLibs/Common/Modes/Medals.Script.txt" as Medals
#Include "Libs/Nadeo/MenuLibs/Common/Components/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/MenuLibs/Common/Menu/Components/LoadingSpinner.Script.txt" as LoadingSpinner
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/Record_Common.Script.txt" as Record
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Const
#Include "Libs/Nadeo/TMNext/TrackMania/API/LeaderboardAPI.Script.txt" as LeaderboardAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/API/ClubAPI.Script.txt" as ClubAPI
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/UserStore.Script.txt" as UserStore
#Include "Libs/Nadeo/TMNext/TrackMania/RBAC.Script.txt" as RBAC
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Constants
#Include "Libs/Nadeo/CommonLibs/Common/AudioManager.Script.txt" as AudioManager

#Struct K_Scope {
	Text Type;
	Text Id;
}

#Struct K_Celebration {
	Boolean IsActive;
	Integer PrevTime;
	Integer BestTime;
	Integer PrevMedal;
	Integer BestMedal;
}

#Struct K_RecordGhost {
	Text AccountId;
	Ident TaskIdRetrieveRecords;
	Ident TaskIdRetrieveGhost;
	Ident GhostId;
	Ident GhostInstanceId;
}

#Struct K_State {
	Integer SetupUpdate;
	Integer ForceMapUpdate;
	Boolean AlwaysDisplayRecords;
	Boolean ReloadRecords;
	Boolean PBGhostEnabled;
	Boolean MedalEnabled;
	Boolean CelebratePB;
	Boolean CelebrateMedal;
	Text CurrentMapUid;
	Ident TaskIdGetRecordGhost;
	Ident PBGhostId;
	Ident PBGhostInstanceId;
	Ident PBCpSyncedGhostInstanceId;
	Text ScopeSeason;
	Text ScopeNotSeason;
	Text ModeName;
	Text CustomData;
	Text[Text] SeasonIds;
	Boolean RequestCelebration;
	K_Celebration Celebration;
	Integer CurrentMedal;
	Boolean RecordsEnabled;
	Boolean PlayerIsDisplayingRecords;
	Integer RecordsSelectedZone;
	Integer RecordsPlayerTime;
	Integer RecordsServerUpdate;
	Integer[] RecordsAreDirty;
	Integer[] RecordsNeedInit;
	Boolean RequestRecordsInProgress;
	Integer[] RecordsErrorCodes;
	Http::LibCommonHttp_K_Request RequestZonesTopRecords;
	Http::LibCommonHttp_K_Request RequestZonesSurroundingRecords;
	Http::LibCommonHttp_K_Request RequestClubTopRecords;
	Http::LibCommonHttp_K_Request RequestClubSurroundingRecords;
	Http::LibCommonHttp_K_Request RequestClubVIPList;
	Http::LibCommonHttp_K_Request RequestGlobalVIPList;
	Ident TaskIdGetClubVIPRecords;
	Ident TaskIdGetGlobalVIPRecords;
	LeaderboardAPI::LibLeaderboardAPI_K_ResponseFromGetMapTopRankings ResponseZonesTopRecords;
	LeaderboardAPI::LibLeaderboardAPI_K_ResponseFromGetSurroundingRankings ResponseZonesSurroundingRecords;
	LeaderboardAPI::LibLeaderboardAPI_K_ResponseFromGetMapTopRankingsInClub ResponseClubTopRecords;
	LeaderboardAPI::LibLeaderboardAPI_K_ResponseFromGetMapSurroundingRankingsInClub ResponseClubSurroundingRecords;
	Integer[Text] ResponseClubVIPRecords;
	Integer[Text] ResponseGlobalVIPRecords;
	Boolean LoadingRecords;
	Text RecordsLoadedForMapUid;
	Text RecordsLoadingForMapUid;
	Ident TaskIdRetrieveDisplayName;
	Integer RecordsClubId;
	Text RecordsClubName;
	Record::K_TMxSM_Record_Records[] ZonesRecords;
	K_RecordGhost[Text] LoadingRecordGhosts;
	K_RecordGhost[Text] LoadedRecordGhosts;
}

        #Struct Player {
            Text Login;
            Text Name;
            Boolean Online;
        }

#Const C_Event_ToggleGhost "TMxSM_Race_Record_ToggleGhost"
#Const C_ForceRecordScope "PersonalBest"
#Const C_RecordStatus_Loading 0
#Const C_RecordStatus_Loaded 1

        declare Vec3 headerColor;
        declare Vec3 primaryColor;
        declare Integer selectedZone;
        declare Text[] availableZones;
        declare Record::K_TMxSM_Record_Records[] records;
    {/block}

    {block bootScript}
        startLoading();

        primaryColor = TL::ToColor("{config('theme.hud.text-light')|noescape}");
        headerColor = TL::ToColor("{config('theme.hud.accent')|noescape}");

        left__ = {config('records.ui.position') == 'left'|ms_bool};
        slot__ = {config('records.ui.slot')};

        declare Integer EvoSC_CustomNamesUpdate for LocalUser;
        declare lastNamesUpdate = 0;

        declare K_State Race_Record_State for UI;
        declare Record::K_TMxSM_Record_Records[] Race_Record_ZonesRecords for ClientUI;
        declare Boolean Race_Record_LoadingRecords for ClientUI;
        declare Integer Race_Record_ZonesRecordsUpdate for ClientUI;
        declare Integer[Text] Race_Record_RecordsStatus for ClientUI;
        declare Integer Race_Record_RecordsStatusUpdate for ClientUI;
        declare lastRecordsUpdate = -1;
        declare lastRaceRecordRecordsStatusUpdate = -1;
        declare lastCurrentServerModeName = "";
        selectedZone = 0;

        Race_Record_State = ReleaseAllRecordGhosts(Race_Record_State);
    {/block}

    {block loop}
        if(lastNamesUpdate != EvoSC_CustomNamesUpdate && availableZones.count > 0){
            lastNamesUpdate = EvoSC_CustomNamesUpdate;
            changeZone(availableZones[selectedZone]);
        }

        if(CurrentServerModeName != lastCurrentServerModeName){
            lastCurrentServerModeName = CurrentServerModeName;
            modeChanged(CurrentServerModeName);
        }

        if(lastRecordsUpdate != Race_Record_ZonesRecordsUpdate){
            lastRecordsUpdate = Race_Record_ZonesRecordsUpdate;
            update(Race_Record_ZonesRecords);
        }

        if(lastRaceRecordRecordsStatusUpdate != Race_Record_RecordsStatusUpdate){
            lastRaceRecordRecordsStatusUpdate = Race_Record_RecordsStatusUpdate;
            //log(Race_Record_State);
            update(Race_Record_ZonesRecords);
        }
    {/block}

    {block pendingEvents}
        if(event.Type == CMlScriptEvent::Type::MouseClick){
            if(event.Control.HasClass("ghost")){
                declare icon = (event.Control as CMlLabel);
                declare Text AccountId = icon.DataAttributeGet("account-id");
                Race_Record_State = RetrieveRecordGhost(Race_Record_State, AccountId);
                //log(Race_Record_State);
                log(DataFileMgr.TaskResults);
                continue;
            }
            if(event.Control.HasClass("next")){
                selectedZone += 1;
                (Page.MainFrame.GetFirstChild("prev-zone") as CMlLabel).Opacity = 1.0;
                (Page.MainFrame.GetFirstChild("next-zone") as CMlLabel).Opacity = 1.0;
                if(selectedZone + 1 == availableZones.count){
                    (Page.MainFrame.GetFirstChild("next-zone") as CMlLabel).Opacity = 0.5;
                }
                if(selectedZone >= availableZones.count){
                    selectedZone = 0;
                    (Page.MainFrame.GetFirstChild("prev-zone") as CMlLabel).Opacity = 0.5;
                }
                changeZone(availableZones[selectedZone]);
                continue;
            }
            if(event.Control.HasClass("previous")){
                selectedZone -= 1;
                (Page.MainFrame.GetFirstChild("prev-zone") as CMlLabel).Opacity = 1.0;
                (Page.MainFrame.GetFirstChild("next-zone") as CMlLabel).Opacity = 1.0;
                if(selectedZone == 0){
                    (Page.MainFrame.GetFirstChild("prev-zone") as CMlLabel).Opacity = 0.5;
                }
                if(selectedZone < 0){
                    selectedZone = availableZones.count - 1;
                    (Page.MainFrame.GetFirstChild("next-zone") as CMlLabel).Opacity = 0.5;
                }
                changeZone(availableZones[selectedZone]);
                continue;
            }
        }
    {/block}
--></script>
</manialink>