{contentType text}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink id="Vote" name="ESC:Vote" version="3">
    {include 'components.stylesheet'}
    <frame id="widget" size="50 30" pos="{config('votes.pos')}" scale="{config('votes.scale') * 0.5}" z-index="50000">
        <quad pos="2 -6" z-index="1" size="46 0.5" bgcolor="3333"/>
        <quad pos="2 -6" z-index="2" size="3 0.5" bgcolor="1f8c"/>
        <quad pos="48 -6" z-index="2" size="3 0.5" halign="right" bgcolor="f33c"/>

        <label class="yes text-light" pos="2 -3" z-index="1" size="16 2.8" halign="left" textprefix="$fff" text="0 YES $aaaF5" valign="center" textsize="1.2" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="{config('colors.ui.window.header.color')}9"/>
        <label class="no text-light" pos="48 -3" z-index="1" size="16 2.8" halign="right" textprefix="$aaaF6 $fff" text="0 NO" valign="center" textsize="1.2" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="{config('colors.ui.window.header.color')}9"/>

        <label class="text-light" opacity="0.75" pos="25 -3" z-index="1" size="49 2.8" halign="center" text="{$duration}" valign="center" textsize="0.6"/>

        <label class="text-light" id="question" pos="25 -8.5" z-index="1" size="48 5" textprefix="$s" autonewline="1" text="{$question}" halign="center" textsize="1.25"/>

        <quad class="bg-blur" id="bg1" size="50 13" z-index="-1" />
        <quad class="bg-accent" id="bg2" pos="0 0" size="50 13" opacity="0.65" z-index="-2" />

        <script><!--
    #Include "MathLib" as ML
    #Include "TextLib" as TL

    main() {
        declare Integer[Text] VoteState for LocalUser = Integer[Text];
        declare widget <=> (Page.MainFrame.GetFirstChild("widget") as CMlFrame);
        declare backgroundBar = (widget.Controls[0] as CMlQuad);
        declare yesBar = (widget.Controls[1] as CMlQuad);
        declare noBar = (widget.Controls[2] as CMlQuad);
        declare yesLabel = (widget.Controls[3] as CMlLabel);
        declare noLabel = (widget.Controls[4] as CMlLabel);
        declare timeLeftLabel = (widget.Controls[5] as CMlLabel);
        declare Real backgroundBarWidth = backgroundBar.Size[0];
        declare Integer duration = {$duration};
        declare bg1 <=> (Page.MainFrame.GetFirstChild("bg1") as CMlQuad);
        declare bg2 <=> (Page.MainFrame.GetFirstChild("bg2") as CMlQuad);
        declare questionLabel <=> (Page.MainFrame.GetFirstChild("question") as CMlLabel);

        if(TL::Length(questionLabel.Value) > 32){
            bg1.Size = <50.0, bg1.Size[1] + 3.0>;
            bg2.Size = <50.0, bg2.Size[1] + 3.0>;
        }

        widget.RelativePosition_V3 = <(widget.Size[0]*widget.RelativeScale)/-2.0, widget.RelativePosition_V3[1]>;
        declare targetPos = (widget.Size[0]/-2.0) ^ " " ^ widget.RelativePosition_V3[1];
        declare targetScale = """ <frame pos='""" ^ targetPos ^ """' scale="{config('votes.scale')|noescape}" /> """;
        AnimMgr.Add(widget, targetScale, 500, CAnimManager::EAnimManagerEasing::ElasticOut);
        declare originalScale = {config('votes.scale')};

        declare startTime = GameTime;
        declare voteEnded = False;

        while(True){
            yield;

            if(voteEnded){
                if(widget.RelativeScale == originalScale){
                    AnimMgr.Add(widget, """ <frame pos='""" ^ widget.RelativePosition_V3[0] ^ """ 110' /> """, 500, CAnimManager::EAnimManagerEasing::ExpIn);
                }

                sleep(550);
                widget.Hide();
                return;
            }

            foreach(event in PendingEvents){
                if(event.Control == Null) continue;

                if(event.Control.HasClass("yes") && event.Type == CMlScriptEvent::Type::MouseClick){
                    TriggerPageAction("votes.yes");
                }

                if(event.Control.HasClass("no") && event.Type == CMlScriptEvent::Type::MouseClick){
                    TriggerPageAction("votes.no");
                }
            }

            declare timeLeft = duration - (GameTime - startTime) / 1000;
            timeLeftLabel.SetText(TL::ToText(timeLeft));

            if(VoteState.count > 0){
                declare Integer yes = VoteState["yes"];
                declare Integer no = VoteState["no"];

                if((yes == -1 && no == -1) || timeLeft <= 0){
                    voteEnded = True;
                    continue;
                }

                declare Real total = (yes * 1.0) + (no * 1.0);

                if(total == 0){
                    continue;
                }

                declare Real yesWidth = (yes / total) * backgroundBarWidth;
                declare Real noWidth = (no / total) * backgroundBarWidth;

                yesBar.Size = <yesWidth, yesBar.Size[1]>;
                noBar.Size = <noWidth, noBar.Size[1]>;

                yesLabel.SetText(yes ^ " YES $aaaF5");
                noLabel.SetText(no ^ " NO");

                VoteState = Integer[Text];
            }
        }
    }
    --></script>
    </frame>
</manialink>