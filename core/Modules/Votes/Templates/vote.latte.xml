{contentType text}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink id="Vote" name="EvoSC:Vote" version="3">
    {include isManiaPlanet() ? 'Components.stylesheet' : 'Components.stylesheet_noblur'}

    <frame id="widget" size="50 50" pos="{config('votes.pos')}" scale="{config('votes.scale') * 0.5}" z-index="50000">
        <label id="question" class="text-light" pos="25 -2.25" z-index="1" size="48 5" textprefix="$s" autonewline="1" text="{$vote->question}" halign="center" textsize="1.25"/>

        <frame id="main">
            <frame pos="0 -7">
                <quad id="bar_bg" class="bg-darker" pos="0 0" z-index="1" size="50 4" opacity="0.5"/>
                <quad id="bar_success" class="bg-success" pos="0 0" z-index="2" size="1 4" opacity="0.85"/>
                <quad id="bar_fail" class="bg-danger" pos="50 0" z-index="2" size="1 4" halign="right" opacity="0.85"/>

                <frame hidden="{$vote->success_ratio == 0.5 ? '1' : '0'}" z-index="3">
                    <quad id="ratio_marker" opacity="0.5" pos="48 0" z-index="3" size="0.3 4" halign="center" bgcolor="fffe"/>
                    <label id="ratio_label" opacity="0.5" class="text-light" pos="25 -1.8" z-index="3" size="49 2.8" halign="right" text="{$vote->success_ratio * 100}%" valign="center" textsize="0.4"/>
                </frame>
            </frame>

            <frame pos="0 -13.5">
                <label id="label_yes" class="btn-muted yes" opacity="0.86" pos="2 0" z-index="1" size="12 3.5" halign="left" textcolor="fff" text="0 YES $aaaF5" valign="center" textsize="0.75" ScriptEvents="1" focusareacolor1="0000"/>
                <label id="label_no" class="btn-muted no" opacity="0.86" pos="48 0" z-index="1" size="12 3.5" halign="right" textcolor="fff" text="$aaaF6 0 NO" valign="center" textsize="0.75" ScriptEvents="1" focusareacolor1="0000"/>
                <label id="time_left" class="text-light" opacity="0.9" pos="25 0" z-index="1" size="49 2.8" halign="center" text="{$vote->duration}" valign="center" textsize="0.6"/>
            </frame>
        </frame>

        <quad id="bg1" class="bg-blur" size="50 16.5" z-index="-1" />
        <quad id="bg2" class="bg-dark" pos="0 0" size="50 16.5" opacity="0.4" z-index="-3" />
        <quad id="bg3" class="bg-light" pos="0 0" size="50 7" opacity="0" z-index="-2" />

        <script><!--
    #Include "MathLib" as ML
    #Include "TextLib" as TL

    main() {
        declare Integer[Text] VoteState for LocalUser = Integer[Text];
        declare mainFr <=> (Page.MainFrame.GetFirstChild("main") as CMlFrame);
        declare widget <=> (Page.MainFrame.GetFirstChild("widget") as CMlFrame);
        declare backgroundBar = (Page.MainFrame.GetFirstChild("bar_bg") as CMlQuad);
        declare yesBar = (Page.MainFrame.GetFirstChild("bar_success") as CMlQuad);
        declare noBar = (Page.MainFrame.GetFirstChild("bar_fail") as CMlQuad);
        declare ratioMarker = (Page.MainFrame.GetFirstChild("ratio_marker") as CMlQuad);
        declare ratioLabel = (Page.MainFrame.GetFirstChild("ratio_label") as CMlLabel);
        declare yesLabel = (Page.MainFrame.GetFirstChild("label_yes") as CMlLabel);
        declare noLabel = (Page.MainFrame.GetFirstChild("label_no") as CMlLabel);
        declare timeLeftLabel = (Page.MainFrame.GetFirstChild("time_left") as CMlLabel);
        declare Real backgroundBarWidth = backgroundBar.Size[0];
        declare Integer duration = {$vote->duration};
        declare bg1 <=> (Page.MainFrame.GetFirstChild("bg1") as CMlQuad);
        declare bg2 <=> (Page.MainFrame.GetFirstChild("bg2") as CMlQuad);
        declare questionLabel <=> (Page.MainFrame.GetFirstChild("question") as CMlLabel);

        declare yesSuffix = "$aaaF5";
        declare noPrefix = "$aaaF6";

        declare questionHeight = questionLabel.ComputeHeight(questionLabel.Value);
        if(TL::Length(questionLabel.Value) > 32){
            bg1.Size[1] = bg1.Size[1] + questionHeight;
            bg2.Size[1] = bg2.Size[1] + questionHeight;
            mainFr.RelativePosition_V3[1] = questionHeight * -1.0 + 3.0;
        }

        widget.RelativePosition_V3 = <(widget.Size[0]*widget.RelativeScale)/-2.0, widget.RelativePosition_V3[1]>;
        declare targetPos = (widget.Size[0]/-2.0) ^ " " ^ widget.RelativePosition_V3[1];
        declare targetScale = """ <frame pos='""" ^ targetPos ^ """' scale="{config('votes.scale')|noescape}" /> """;
        AnimMgr.Add(widget, targetScale, 500, CAnimManager::EAnimManagerEasing::ElasticOut);
        declare originalScale = {config('votes.scale')};
        declare startTime = GameTime;
        declare usesPad = False;

        ratioMarker.RelativePosition_V3[0] = {$vote->success_ratio} * 46.0 + 2.0;
        ratioLabel.RelativePosition_V3[0] = ratioMarker.RelativePosition_V3[0] - 1.0;

        while(True){
            yield;

/*
            foreach (Event in Input.PendingEvents) {
                if(!usesPad && Event.Pad != Null && Event.Pad.Type != CInputPad::EPadType::Keyboard){
                    usesPad = True;
                    yesSuffix = "$aaa";
                    noPrefix = "$aaa";
                    yesLabel.SetText("0 YES " ^ yesSuffix);
                    noLabel.SetText(noPrefix ^ " $fff0 NO");
                }
                if (Event.Type == CInputEvent::EType::PadButtonPress && Event.Pad != Null && Event.Pad.Type != CInputPad::EPadType::Keyboard){
                    if(Event.Button == CInputEvent::EButton::L1){
                        TriggerPageAction("votes.yes");
                        continue;
                    }
                    if(Event.Button == CInputEvent::EButton::R1){
                        TriggerPageAction("votes.no");
                        continue;
                    }
                }
            }
            */

            foreach(event in PendingEvents){
                if(event.Control == Null) continue;

                if(event.Control.HasClass("yes") && event.Type == CMlScriptEvent::Type::MouseClick){
                    TriggerPageAction("votes.yes");
                    continue;
                }

                if(event.Control.HasClass("no") && event.Type == CMlScriptEvent::Type::MouseClick){
                    TriggerPageAction("votes.no");
                    continue;
                }
            }

            declare timeLeft = duration - (GameTime - startTime) / 1000;
            timeLeftLabel.SetText(TL::ToText(timeLeft));

            if(timeLeft <= 0){
                break;
            }

            if(VoteState.count > 0){
                declare Integer yes = VoteState["yes"];
                declare Integer no = VoteState["no"];

                if((yes == -1 && no == -1) || timeLeft <= 0){
                    break;
                }

                declare Real total = (yes * 1.0) + (no * 1.0);

                if(total == 0){
                    continue;
                }

                declare Real yesWidth = (yes / total) * backgroundBarWidth;
                declare Real noWidth = (no / total) * backgroundBarWidth;

                yesBar.Size = <yesWidth, yesBar.Size[1]>;
                noBar.Size = <noWidth, noBar.Size[1]>;

                yesLabel.SetText(yes ^ " YES " ^ yesSuffix);
                noLabel.SetText(noPrefix ^ " " ^ no ^ " NO");

                VoteState = Integer[Text];
            }
        }

        if(widget.RelativeScale == originalScale){
            AnimMgr.Add(widget, """ <frame pos='""" ^ widget.RelativePosition_V3[0] ^ """ 110' /> """, 500, CAnimManager::EAnimManagerEasing::ExpIn);
        }

        sleep(550);
        widget.Hide();
    }
    --></script>
    </frame>
</manialink>