{contentType text}
{extends 'Components.widget-base'}
{php $customHidescript = true;}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink version="3">
    {block id}cp-position-tracker{/block}
    {block size}44 {config('cp-pos-tracker.show') * 2.5 + 5}{/block}

    {block content}
    <framemodel id="record">
        <label z-index="2" valign="center" halign="right" pos="3 0" size="3 2" textsize="0.4" text="78." textfont="{config('colors.ui.font')|noescape}" />
        <label z-index="2" valign="center" halign="right" pos="14 0" size="12 2" textsize="0.4" text="0:00.000" textcolor="fff4" textfont="{config('colors.ui.font')|noescape}" />
        <label z-index="2" valign="center" halign="right" pos="14 0" size="12 2" textsize="0.4" text="0:00.000" textcolor="eeef" textfont="{config('colors.ui.font')|noescape}" />
        <label z-index="2" valign="center" pos="15 0" size="23 2" textsize="0.4" text="name name name name name" textfont="{config('colors.ui.font')|noescape}" />
    </framemodel>

    <frame id="widget" pos="{config('cp-pos-tracker.pos')}">
        <quad id="bg" size="44 100" pos="0 0" bgcolor="{config('colors.ui.window.bg.color')}" opacity="{config('colors.ui.widget.bg.opacity') - 0.15}" z-index="-1" />
        <label pos="2 -2.5" valign="center" textsize="0.5" text=" Checkpoint Tracker" z-index="1" textprefix="$s" textfont="{config('colors.ui.font')|noescape}" />

        <frame id="ranking" pos="1 -7">
            {for $i=0; $i < config('cp-pos-tracker.show'); $i++}
            <frameinstance modelid="record" pos="0 {$i * -2.5}" hidden="1"/>
            {/for}
        </frame>
    </frame>
    {/block}

    {block script}
    <script><!--

    Text formatScoreCorrect(Integer scoreIn, Boolean cutZeroes){
        declare Text secondString;
        declare Text msString;
        declare Integer score;

        score = scoreIn;

        if(score < 0){
            score = -score;
        }

        declare Integer seconds = score / 1000;
        declare Integer minutes = seconds / 60;
        declare Integer ms = score - (seconds * 1000);

        seconds = seconds - (minutes * 60);

        secondString = "" ^ seconds;

        if(seconds < 10 && minutes > 0){
            secondString = "0" ^ seconds;
        }

        if(ms == 0){
            msString = "000";
        }else if(ms > 0 && ms < 10){
            msString = "00" ^ ms;
        }else if(ms >= 10 && ms < 100){
            msString = "0" ^ ms;
        }else{
            msString = "" ^ ms;
        }

        if(cutZeroes && minutes == 0){
            return secondString ^ "." ^ msString;
        }

        return minutes ^ ":" ^ secondString ^ "." ^ msString;
    }

    Void hide(){
        HS_Hidden = True;
        AnimMgr.Add(bg, "<quad opacity='0.0' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
    }

    Void show(){
        HS_Hidden = False;
        AnimMgr.Add(bg, "<quad opacity='{config('colors.ui.widget.bg.opacity') - 0.15}' />", 800, CAnimManager::EAnimManagerEasing::ExpInOut);
    }

    Void hidescript(){
        if(HS_Target == Null){
            HS_Target <=> (Page.MainFrame.GetFirstChild("{isset($target) ? $target : 'widget'}") as CMlFrame);
        }

        declare UISettings settings for This;
        declare hideSpeed = settings.speed;

        if(hideSpeed == -1 || InputPlayer == Null){
            return;
        }

        declare Boolean mapFinished = {(isset($hideOnPodium) ? "UI.UISequence == CUIConfig::EUISequence::Podium" : "False")|noescape};

        if(mapFinished){
            if(!HS_Hidden){
                hide();
            }
        }else{
            {if $is_maniaplanet}
            declare Boolean playerIsRacing = InputPlayer.RaceState == CTmMlPlayer::ERaceState::Running;
            declare Boolean overHidespeed = InputPlayer.Speed * 3.6 > hideSpeed;
            {else}
            declare Boolean overHidespeed = InputPlayer.Speed * 3.6 > 10;
            {/if}

            if(overHidespeed {if $is_maniaplanet}&& playerIsRacing {/if}&& !HS_Hidden){
                hide();
            }
            if((!overHidespeed {if $is_maniaplanet}|| !playerIsRacing{/if}) && HS_Hidden){
                show();
            }
        }
    }

    Void updateView(Text dataJson){
        declare ranking <=> (Page.MainFrame.GetFirstChild("ranking") as CMlFrame);
        declare Integer i = 0;

        declare Text[Text][][Integer] groups;
        groups.fromjson(dataJson);

        foreach(group in groups){
            foreach(pos in group){
                if(i < {config('cp-pos-tracker.show')}){
                    declare record = (ranking.Controls[i] as CMlFrame);
                    if(pos["finish"] == "True"){
                        (record.Controls[0] as CMlLabel).Value = "";
                    }else{
                        (record.Controls[0] as CMlLabel).Value = pos["cp"] ^ ".";
                    }
                    (record.Controls[1] as CMlLabel).Value = formatScoreCorrect(TL::ToInteger(pos["score"]), False);
                    (record.Controls[2] as CMlLabel).Value = formatScoreCorrect(TL::ToInteger(pos["score"]), True);
                    (record.Controls[3] as CMlLabel).Value = pos["name"];
                    record.Show();
                    i = i + 1;
                }
            }
        }

        for(x, i, {config('cp-pos-tracker.show') - 1}){
            (ranking.Controls[x] as CMlFrame).Hide();
        }
    }
    --></script>
    {/block}

    <script><!--
    {block globals}
    #Struct Position {
        Integer cp;
        Integer time;
        Text login;
        Text nick;
    }

    declare Vec2 widgetBasePosition;
    declare CMlFrame HS_Target;
    declare Boolean HS_Hidden;
    declare Position[Text] positions;
    {/block}

    {block bootScript}
        declare Integer ESC_LastCpPosUpdate for This;
        declare Text ESC_CpPos for This;
        declare lastUpdate = 0;

        positions = Position[Text];

        left__ = {config('cp-pos-tracker.ui.position') == 'left'|ms_bool};
        slot__ = {config('cp-pos-tracker.ui.slot')};
    {/block}

    {block loop}
            if(lastUpdate != ESC_LastCpPosUpdate){
                lastUpdate = ESC_LastCpPosUpdate;
                updateView(ESC_CpPos);
            }

            hidescript();
    {/block}

    {block pendingEvents}
    {/block}
--></script>
</manialink>