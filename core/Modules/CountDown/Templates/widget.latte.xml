{contentType text}
{extends 'Components.widget-base'}
{php $dontHide = true;}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink version="3">
    {block id}countdown{/block}
    {block size}44 8{/block}

    {block content}
    <label class="text-lighter" textprefix="$s" scale="3.0" halign="center" />
    <frame id="Frame_Global">
        <frame id="Frame_Intro" pos="43 0">
            <label id="Label_Countdown" class="text-light" textprefix="$s" scale="3.0" halign="right" />
        </frame>
    </frame>
    {/block}

    {block script}
    <script><!--
Text TimeToText(Integer _Time) {
  if (_Time < 0) {
    return "0:00";
  }

  declare Seconds = (_Time / 1000) % 60;
  declare Minutes = (_Time / 60000) % 60;
  declare Hours = (_Time / 3600000);

  declare Time = "";
  if (Hours > 0) Time = Hours^":"^TL::FormatInteger(Minutes, 2)^":"^TL::FormatInteger(Seconds, 2);
  else Time = Minutes^":"^TL::FormatInteger(Seconds, 2);
  return Time;
}

Void HideDuringIntro(CMlFrame _Frame) {
  if (_Frame == Null) return;

  declare IsIntro = (
    UI.UISequence == CUIConfig::EUISequence::Intro ||
    UI.UISequence == CUIConfig::EUISequence::RollingBackgroundIntro ||
    UI.UISequence == CUIConfig::EUISequence::Outro ||
    UI.UISequence == CUIConfig::EUISequence::Podium
  );

  if (_Frame.Visible && IsIntro) {
    _Frame.Visible = False;
  } else if (!_Frame.Visible && !IsIntro) {
    _Frame.Visible = True;
  }
}
    --></script>
    {/block}

    <script><!--
    {block globals}
    {/block}

    {block bootScript}
  declare Frame_Global  <=> (Page.GetFirstChild("Frame_Global")   as CMlFrame);
  declare Frame_Intro  <=> (Page.GetFirstChild("Frame_Intro")   as CMlFrame);
  declare Label_Countdown <=> (Page.GetFirstChild("Label_Countdown")  as CMlLabel);

  declare netread Integer Net_LibUI_SettingsUpdate for Teams[0];
  declare netread Text[Text] Net_LibUI_Settings for Teams[0];

  declare PrevSettingsUpdate = -1;
  declare CutOffTimeLimit = -1;

  declare PrevCountdownVisible = True;

        left__ = {config('countdown.ui.position') == 'left'|ms_bool};
        slot__ = {config('countdown.ui.slot')};
    {/block}

    {block loop}
HideDuringIntro(Frame_Intro);

declare Owner <=> GUIPlayer;
if (!PageIsVisible || Owner == Null) continue;

if (PrevSettingsUpdate != Net_LibUI_SettingsUpdate) {
  PrevSettingsUpdate = Net_LibUI_SettingsUpdate;
  foreach (SettingName => SettingValue in Net_LibUI_Settings) {
    switch (SettingName) {
      case "TMUIModule_Countdown_CutOffTimeLimit": {
        CutOffTimeLimit = TL::ToInteger(SettingValue);
      }
    }
  }
}

if (PrevCountdownVisible) {
  if (CutOffTimeLimit > 0) {
    if (!Frame_Global.Visible) Frame_Global.Visible = True;
  } else if (Frame_Global.Visible) {
    Frame_Global.Visible = False;
  }
}

if (!Frame_Global.Visible) continue;

if (CutOffTimeLimit >= GameTime) Label_Countdown.Value = TimeToText(CutOffTimeLimit - GameTime + 1);
else Label_Countdown.Value = TimeToText(0);

if (CutOffTimeLimit - GameTime > 30000) Label_Countdown.TextColor = <1., 1., 1.>;
else Label_Countdown.TextColor = <0.98, 0.149, 0.149>;
    {/block}

    {block pendingEvents}
    {/block}
--></script>
</manialink>