{contentType text}
{extends 'Components.widget-base'}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manialink version="3">
    {block id}server-hopper-widget{/block}
    {block size}44 10{/block}

    {block content}
    <quad class="bg-accent" size="50 5" z-index="-1" />
    <quad id="bg" class="bg-dark" size="50 100" pos="0 -5" opacity="0.8" z-index="-1" />
    <label class="text-light" pos="2 -2.5" valign="center" textsize="0.5" text=" Servers" z-index="1" textprefix="" textfont="{config('colors.ui.font')|noescape}" />

    <frame id="pagination" pos="30 -2.5" scale="0.95">
        <label class="text-light previous" pos="3.75 0" size="3 3" valign="center" halign="center" text="" z-index="5" textsize="0.5" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="0000" />
        <label id="page-label" class="text-light" pos="7.5 0.05" size="4 1" valign="center" halign="center" text="1/2" z-index="5" textsize="0.75" />
        <label class="text-light next" pos="11.5 0" size="3 3" valign="center" halign="center" text="" z-index="5" textsize="0.5" ScriptEvents="1" focusareacolor1="0000" focusareacolor2="0000" />
    </frame>

    <frame id="data" pos="-1.25 -7.25" scale="0.9">
        {for $i=0; $i<config('server-hopper.ui.servers-per-page'); $i++}
        <frame pos="1 {$i * -3.5}">
            <label class="text-light" pos="5.5 0" size="8 4" halign="right" valign="center" textsize="0.8" textprefix="$s" />
            <label class="text-light" pos="5.6 -0.35" size="6 4" halign="left" valign="center" scale="0.65" textprefix="/" opacity="0.75" />
            <label class="text-light" pos="10.5 0" size="38 4" valign="center" textsize="0.8"/>
            {if !isManiaplanet()}
            <label class="btn-muted join" pos="24" size="60 4" ScriptEvents="1" focusareacolor1="0000" />
            {/if}
        </frame>
        {/for}
    </frame>
    {/block}

    {block script}
    <script><!--
    Text getJoinLink(Text[Text] server){
        declare Text youAreHere = "";
        declare Text pw = "";
        declare joinLink = "";

        if(server["login"] == CurrentServerLogin){
            youAreHere = "$z  $999 you";
        }

        if(server["pw"] == "True"){
            pw = " $fff";
        }

        {if $is_maniaplanet}
            joinLink = "$p[#join=" ^ server["login"] ^ "@" ^ server["title"] ^ "]";
        {else}
            joinLink = "";
        {/if}

        return joinLink ^ server["name"] ^ pw ^ youAreHere;
    }

    Integer getTotalPages(Integer itemCount){
        declare pageCount = -1;
        pageCount = ML::CeilingInteger(itemCount / perPage * 1.0);
        if(itemCount % perPage == 0){
            pageCount -= 1;
        }
        return pageCount;
    }

    Void updateWidget(Text data){
        declare Integer LastUiUpdate for This = 0;
        declare dataFrame <=> (Page.MainFrame.GetFirstChild("data") as CMlFrame);
        declare Text[Text][] servers;
        declare filled = 0;
        declare skipped = 0;
        declare Text pw = "";
        servers.fromjson(data);

        totalPages = getTotalPages(servers.count);
        (Page.MainFrame.GetFirstChild("page-label") as CMlLabel).Value = (page + 1) ^ "/" ^ totalPages;
        (Page.MainFrame.GetFirstChild("pagination") as CMlFrame).Visible = totalPages > 1;

        foreach(server in servers){
            if(skipped < page * perPage){
                skipped += 1;
                continue;
            }

            if(filled >= servers.count || filled >= dataFrame.Controls.count){
                break;
            }

            declare frame = (dataFrame.Controls[filled] as CMlFrame);
            frame.Show();

            if(TL::ToInteger(server["players"]) > 0){
                (frame.Controls[0] as CMlLabel).SetText("$fff" ^ server["players"]);
            }else{
                (frame.Controls[0] as CMlLabel).SetText("$aaa" ^ server["players"]);
            }

            (frame.Controls[1] as CMlLabel).SetText(server["max"]);
            (frame.Controls[2] as CMlLabel).SetText(getJoinLink(server));
            {if !isManiaplanet()}
            frame.Controls[3].DataAttributeSet("login", server["login"]);
            {/if}

            filled += 1;
        }

        for(x, filled, dataFrame.Controls.count - 1){
            (dataFrame.Controls[x] as CMlFrame).Hide();
        }
    }
    --></script>

    {include 'Scripts.mle'}
    {/block}

    <script><!--
    {block globals}
    declare Integer page;
    declare Integer perPage;
    declare Integer totalPages;
    {/block}

    {block bootScript}
        perPage = {config('server-hopper.ui.servers-per-page')};
        declare Integer LastServersWidgetUpdate for This;
        declare Text ServersWidgetInfo for This;
        declare Integer lastUpdate = 0;
        declare heightSet = False;

        page = 0;

        left__ = {config('server-hopper.ui.position') == 'left'|ms_bool};
        slot__ = {config('server-hopper.ui.slot')};
    {/block}

    {block loop}
        if(lastUpdate != LastServersWidgetUpdate){
            lastUpdate = LastServersWidgetUpdate;
            updateWidget(ServersWidgetInfo);
        }

        if(!heightSet){
            heightSet = True;
            widgetSetHeight__(perPage * 3.5 + 5.5);
        }
    {/block}

    {block pendingEvents}
        if(event.Type == CMlScriptEvent::Type::MouseClick && event.Control.HasClass("previous")){
            page -= 1;
            if(page < 0) page = totalPages - 1;
            updateWidget(ServersWidgetInfo);
            continue;
        }
        if(event.Type == CMlScriptEvent::Type::MouseClick && event.Control.HasClass("next")){
            page += 1;
            if(page >= totalPages) page = 0;
            updateWidget(ServersWidgetInfo);
            continue;
        }
        if(event.Type == CMlScriptEvent::Type::MouseClick && event.Control.HasClass("join")){
            ManiaLinkEvent("server_hopper_join", event.Control.DataAttributeGet("login"));
            continue;
        }
    {/block}
--></script>
</manialink>